*** linux-sh4/arch/sh/kernel/setup.c	2011-01-05 10:45:31.000000000 +0100
--- setup.c.patched	2011-01-22 12:22:31.340928000 +0100
***************
*** 276,281 ****
--- 276,309 ----
  #endif
  #endif
  
+ 	{
+ 	char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+ 	char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3 rootfstype=squashfs init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 console_loglevel=7 stmmaceth=ethaddr:";
+ 	char mac[] = "00:00:00:00:00:00";
+ 	int command_line_len = strlen(command_line);
+ 	int org_command_line_len = strlen(org_command_line);
+ 
+ 	if(command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+ 	{
+ 		int i;
+ 		for(i = 0; i < (command_line_len - 7); i++)
+ 		{
+ 			if(!strncmp(command_line + i, "ethaddr", 7))
+ 			{
+ 				strlcpy(mac, command_line + i + 8, sizeof(mac));
+ 				break;
+ 			}
+ 			if(!strncmp(command_line + i, "hwaddr", 6))
+ 			{
+ 				strlcpy(mac, command_line + i + 7, sizeof(mac));
+ 				break;
+ 			}
+ 		}
+ 		strlcpy(command_line, tdt_command_line, sizeof(command_line));
+ 		strlcat(command_line, mac, sizeof(command_line));
+ 	}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;

diff -rcN linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/boards/st/sat7111/Makefile linux-sh4/arch/sh/boards/st/sat7111/Makefile
*** linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/boards/st/sat7111/Makefile	1970-01-01 02:00:00.000000000 +0200
--- linux-sh4/arch/sh/boards/st/sat7111/Makefile	2011-07-29 06:50:50.654192548 +0300
***************
*** 0 ****
--- 1,5 ----
+ #
+ # Makefile for STMicroelectronics STi7111SAT board
+ #
+ 
+ obj-y := setup.o
diff -rcN linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/boards/st/sat7111/setup.c linux-sh4/arch/sh/boards/st/sat7111/setup.c
*** linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/boards/st/sat7111/setup.c	1970-01-01 02:00:00.000000000 +0200
--- linux-sh4/arch/sh/boards/st/sat7111/setup.c	2011-07-29 06:50:50.654192548 +0300
@@ -0,0 +1,245 @@
+/*
+ * arch/sh/boards/st/sat7111/setup.c
+ *
+ * Copyright (C) 2008 STMicroelectronics Limited
+ * Author: Stuart Menefy (stuart.menefy@st.com)
+ *
+ * May be copied or modified under the terms of the GNU General Public
+ * License.  See linux/COPYING for more information.
+ *
+ * STMicroelectronics STx7111 Mboard support.
+ */
+
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/leds.h>
+#include <linux/stm/pio.h>
+#include <linux/stm/soc.h>
+#include <linux/stm/emi.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/concat.h>
+#include <linux/mtd/physmap.h>
+#include <linux/mtd/partitions.h>
+#include <linux/bpa2.h>
+#include <linux/phy.h>
+#include <linux/delay.h>
+#include <linux/lirc.h>
+#include <linux/gpio_keys.h>
+#include <linux/input.h>
+#include <asm/irq-ilc.h>
+#include <asm/irl.h>
+#include <asm/io.h>
+#include "../common/common.h"
+
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
+                                    "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+ 
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb) 
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    }, 
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x06000000, /* 92 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    }, 
+ };
+
+static int ascs[2] __initdata = { 2 | STASC_FLAG_NORTSCTS << 8, 3 | STASC_FLAG_NORTSCTS << 8};
+
+static void __init sat7111_setup(char** cmdline_p)
+{
+	printk("STMicroelectronics sat7111 initialisation\n");
+
+	stx7111_early_device_init();
+	stx7111_configure_asc(ascs, 2, 0);
+  	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+}
+
+static struct plat_stm_pwm_data pwm_private_info = {
+	.flags		= PLAT_STM_PWM_OUT0,
+};
+
+static struct plat_ssc_data ssc_private_info = {
+	.capability  =
+		ssc0_has(SSC_I2C_CAPABILITY) |
+		ssc1_has(SSC_I2C_CAPABILITY) |
+		ssc2_has(SSC_I2C_CAPABILITY) |
+		ssc3_has(SSC_I2C_CAPABILITY),
+};
+
+/* J34 must be in the 2-3 position to enable NOR Flash */
+static struct stpio_pin *vpp_pio;
+static struct stpio_pin *phy_reset_pio;
+static struct stpio_pin *usb_reset_pio;
+
+static void set_vpp(struct map_info * info, int enable)
+{
+	stpio_set_pin(vpp_pio, enable);
+}
+
+static struct map_info nor_map = {
+	 .name = "physmap-flash",
+	 .size = 0x02000000,	//32MB
+	 .phys = 0x00000000,
+	 .bankwidth = 2,
+	 .set_vpp	= NULL,
+};
+
+static struct mtd_partition partition_info[]=
+{
+	{
+	 .name = "Boot firmware",
+	 .size = 0x00060000,	//	0,375M
+	 .offset = 0x00000000,	//	ok
+	 },
+	{
+	 .name = "Kernel",
+	 .size = 0x001c0000,	// 	1,75M
+	 .offset = 0x0060000,	//	ok
+	 },
+	{
+	 .name = "Fw",
+	 .size = 0x2a0000,		// 	2M
+	 .offset = 0x00f80000,	//	ok
+	 },
+	{
+	 .name = "Root",
+	 .size = 0x00d60000,	// 	13,375M
+	 .offset = 0x00220000,	//	ok
+	 },
+	{
+	 .name = "Var", // org user
+	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
+	 .offset = 0x01c00000, 
+	 },
+	{
+	.name = "Swap", // org free + config
+	.size = 0x560000,     // 4,375M unused in org kernel
+	.offset = 0x016a0000,
+	 },
+};
+
+static struct physmap_flash_data sat7111_physmap_flash_data = {
+	.width		= 2,
+	.set_vpp	= NULL,
+	.nr_parts	= ARRAY_SIZE(partition_info),
+	.parts		= partition_info
+};
+static struct platform_device physmap_flash = {
+	.name		= "physmap-flash",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start		= 0x00000000,
+			.end		= 32*1024*1024 - 1,
+			.flags		= IORESOURCE_MEM,
+		}
+	},
+	.dev		= {
+		.platform_data	= &sat7111_physmap_flash_data,
+	},
+};
+
+static int sat7111_phy_reset(void *bus)
+{
+	stpio_set_pin(phy_reset_pio, 1);
+	udelay(1);
+	stpio_set_pin(phy_reset_pio, 0);
+	udelay(1);
+	stpio_set_pin(phy_reset_pio, 1);
+    
+	return 1;
+}
+
+static struct plat_stmmacphy_data phy_private_data = {
+	/* SMSC LAN 8700 */
+	.bus_id = 0,
+	.phy_addr = -1,
+	.phy_mask = 0,
+	.phy_reset = &sat7111_phy_reset,
+	.interface = PHY_INTERFACE_MODE_MII,
+};
+
+static struct platform_device sat7111_phy_device = {
+	.name		= "stmmacphy",
+	.id		= 0,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.name	= "phyirq",
+			.start	= -1,/*FIXME*/
+			.end	= -1,
+			.flags	= IORESOURCE_IRQ,
+		},
+	},
+	.dev = {
+		.platform_data = &phy_private_data,
+	}
+};
+
+static struct platform_device *sat7111_devices[] __initdata = {
+	&sat7111_phy_device,
+	&physmap_flash,
+};
+
+
+static int __init device_init(void)
+{
+	int i, devices_found = 0;
+
+	stx7111_configure_ssc(&ssc_private_info);
+	stx7111_configure_usb(1); /* Enable inverter */
+	stx7111_configure_ethernet(1, 0, 0, 0);
+
+	vpp_pio = stpio_request_pin(3,6, "VPP", STPIO_OUT);
+    	phy_reset_pio = stpio_request_pin(4,4, "PHY", STPIO_OUT);
+     	usb_reset_pio = stpio_request_pin(3,5, "USB_RESET", STPIO_OUT);
+	stpio_set_pin(usb_reset_pio, 1);
+	udelay(1);
+	stpio_set_pin(usb_reset_pio, 0);
+	udelay(1);
+	stpio_set_pin(usb_reset_pio, 1);     
+
+	stpio_set_pin(vpp_pio, 1);
+
+	return platform_add_devices(sat7111_devices, ARRAY_SIZE(sat7111_devices));
+}
+arch_initcall(device_init);
+
+static void __iomem *sat7111_ioport_map(unsigned long port, unsigned int size)
+{
+	/* However picking somewhere safe isn't as easy as you might think.
+	 * I used to use external ROM, but that can cause problems if you are
+	 * in the middle of updating Flash. So I'm now using the processor core
+	 * version register, which is guaranted to be available, and non-writable.
+	 */
+	return (void __iomem *)CCN_PVR;
+}
+
+static void __init sat7111_init_irq(void)
+{
+}
+
+struct sh_machine_vector mv_sat7111 __initmv = {
+	.mv_name		= "sat7111",
+	.mv_setup		= sat7111_setup,
+	.mv_nr_irqs		= NR_IRQS,
+	.mv_init_irq		= sat7111_init_irq,
+	.mv_ioport_map		= sat7111_ioport_map,
+};
*** linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2011-06-19 18:34:29.000000000 +0300
--- linux-sh4/arch/sh/kernel/cpu/sh4/setup-stx7111.c	2011-07-29 06:50:51.114192548 +0300
***************
*** 396,404 ****
--- 396,411 ----
  	STASC_DEVICE(0xfd032000, evt2irq(0x1120), 13, 17,
  		     4, 3, 2, 4, 5,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
+ #if 0 // change to pio 6.7 & 6.3		
  	STASC_DEVICE(0xfd033000, evt2irq(0x1100), 14, 18,
  		     5, 0, 1, 2, 3,
  		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
+ #else
+ 	/* ILC_FIRST_IRQ+ILC_EXT_IRQ+X, ILC_FIRST_IRQ=176, ILC_EXT_IRQ=64, X=34 */
+ 	STASC_DEVICE(0xfd034000, evt2irq(0x2440), 14, 18,
+ 		     6, 7, 3, 2, 6,
+ 		STPIO_ALT_OUT, STPIO_IN, STPIO_IN, STPIO_ALT_OUT),
+ #endif		
  };
  
  /*
***************
*** 429,435 ****
  		port = ascs[i] & 0xff;
  		flags = ascs[i] >> 8;
  		pdev = &stm_stasc_devices[port];
! 
  		switch (ascs[i]) {
  		case 0:
  			/* Route UART0 instead of PDES to pins.
--- 436,442 ----
  		port = ascs[i] & 0xff;
  		flags = ascs[i] >> 8;
  		pdev = &stm_stasc_devices[port];
! 		printk("stx7111_configure_asc[%d]  port[%d] \n",i,port);
  		switch (ascs[i]) {
  		case 0:
  			/* Route UART0 instead of PDES to pins.
***************
*** 495,500 ****
--- 502,508 ----
  		.dir  = STPIO_IN,
                  .pinof= 0x00 | LIRC_IR_RX | LIRC_PIO_ON
  	},
+ #if 0
  	[1] = {
  		.bank = 3,
  		.pin  = 4,
***************
*** 513,518 ****
--- 521,527 ----
  		.dir  = STPIO_ALT_OUT,
                  .pinof= 0x00 | LIRC_IR_TX | LIRC_PIO_ON
  	},
+ #endif	
  };
  
  static struct plat_lirc_data lirc_private_info = {
*** linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/Kconfig	2011-06-19 18:34:29.000000000 +0300
--- /home/work/fortis/kconfig/Kconfig	2011-07-31 18:50:11.082161131 +0300
***************
*** 602,607 ****
--- 602,614 ----
  	  STB7111-MBOARD, ST board ID: mb618). More information at:
  	  <http://www.stlinux.com/boards/mb618/>
  
+ config SH_ST_SAT7111
+ 	bool "SAT7111: STi7111SAT Reference board"
+ 	depends on CPU_SUBTYPE_STX7111
+ 	help
+ 	  Select STi7111SAT Reference if configuring for an
+ 	  STMicroelectronics STi7111SAT Reference.
+ 
  config SH_ST_MB628
  	bool "mb628: STx7141 Mboard"
  	depends on CPU_SUBTYPE_STX7141
*** linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/Makefile	2011-06-19 18:34:29.000000000 +0300
--- /home/work/fortis/kconfig/Makefile	2011-07-31 18:54:09.314161104 +0300
***************
*** 157,162 ****
--- 157,163 ----
  machdir-$(CONFIG_SH_ST_5197CAB)			+= st/5197cab
  machdir-$(CONFIG_SH_ST_MB837)			+= st/mb837
  machdir-$(CONFIG_SH_ST_MB839)			+= st/mb839
+ machdir-$(CONFIG_SH_ST_SAT7111)         += st/sat7111 st/common
  
  incdir-y	:= $(notdir $(firstword $(machdir-y)))
  
*** linux-sh4-2.6.23.17_stm23_0123_orig/drivers/char/tty_io.c	2007-10-09 22:31:38.000000000 +0200
--- linux-sh4/drivers/char/tty_io.c	2011-07-29 06:50:44.314192549 +0300
***************
*** 162,167 ****
--- 162,192 ----
  static void __proc_set_tty(struct task_struct *tsk, struct tty_struct *tty);
  static void proc_set_tty(struct task_struct *tsk, struct tty_struct *tty);
  
+ #define SIZE_DobleBuffer	512
+ 
+ /* { Chris - Simple Double Buffer - 2009Nov23  */
+ typedef enum
+ {
+ 	DBUF_Original,
+ 	DBUF_Second,
+ 	DBUF_All
+ } T_TtyDoubleBufferFlag;
+ 
+ #define	TIO_FORTIS_SELECT			(('f'<<8) | 0xf0 )	
+ #define	TIO_FORTIS_READ_SECOND	(('f'<<8) | 0xf1 )	
+ #define	TIO_FORTIS_RESET		(('f'<<8) | 0xf2 )	
+ 
+ #define	MAX_RD_IDX	32
+ typedef struct 
+ {
+ 	struct tty_struct tty;
+ 	unsigned char buf[SIZE_DobleBuffer];
+ 	int	tgid[MAX_RD_IDX];
+ 	int	rd[MAX_RD_IDX];
+ 	int	wr;
+ 	int	flag;	// 0 = use original, 1 = use second buffer only; 2 = use all buffer
+ } S_TtyDoubleBuffer;
+ /* Chris - Simple Double Buffer - 2009Nov23  } */
  /**
   *	alloc_tty_struct	-	allocate a tty object
   *
***************
*** 173,179 ****
  
  static struct tty_struct *alloc_tty_struct(void)
  {
! 	return kzalloc(sizeof(struct tty_struct), GFP_KERNEL);
  }
  
  static void tty_buffer_free_all(struct tty_struct *);
--- 198,220 ----
  
  static struct tty_struct *alloc_tty_struct(void)
  {
! 	/* { Chris - Simple Double Buffer - 2009Nov23  */
! 	S_TtyDoubleBuffer *tty;
! 
! 	tty = ( S_TtyDoubleBuffer * )kzalloc(sizeof(S_TtyDoubleBuffer), GFP_KERNEL);
! 	if (tty)
! 		memset(tty, 0, sizeof(S_TtyDoubleBuffer));
! 	return (struct tty_struct *)tty;
! 	/*  Chris - Simple Double Buffer - 2009Nov23  } */
! 	
! 	/*
! 	struct tty_struct *tty;
! 
! 	tty = kzalloc(sizeof(struct tty_struct), GFP_KERNEL);
! 	if (tty)
! 		memset(tty, 0, sizeof(struct tty_struct));
! 	return (tty_struct)tty;
! 	*/
  }
  
  static void tty_buffer_free_all(struct tty_struct *);
***************
*** 1717,1722 ****
--- 1758,1804 ----
  
  EXPORT_SYMBOL(start_tty);
  
+ /*	{ Chris - Simple Double Buffer - 2009Dec03	*/
+ static int found_rdIdx( S_TtyDoubleBuffer *ttyDbl )
+ {
+ 	int rdIdx = -1;
+ 	int blank = -1;
+ 
+ 	for( rdIdx = 0; rdIdx < MAX_RD_IDX; rdIdx++ )
+ 	{
+ 		if( ttyDbl->tgid[rdIdx] == 0 && blank == -1 )
+ 		{
+ 			blank = rdIdx;
+ 		}
+ 		if( ttyDbl->tgid[rdIdx] == current->tgid ) 
+ 		{
+ 			break;
+ 		}
+ 	}
+ 	
+ 	if( rdIdx == MAX_RD_IDX && blank != -1 )
+ 	{
+ 		rdIdx = blank;
+ 		ttyDbl->tgid[rdIdx] = current->tgid;
+ 	}
+ 
+ 	return rdIdx;
+ }
+ 
+ static void remove_rdIdx(  S_TtyDoubleBuffer *ttyDbl )
+ {
+ 	int rdIdx = -1;
+ 
+ 	for( rdIdx = 0; rdIdx < MAX_RD_IDX; rdIdx++ )
+ 	{
+ 		if( ttyDbl->tgid[rdIdx] == current->tgid ) 
+ 		{
+ 			ttyDbl->tgid[rdIdx] = 0;
+ 			break;
+ 		}
+ 	}
+ }
+ /*	Chris - Simple Double Buffer - 2009Dec03	 } */
  /**
   *	tty_read	-	read method for tty device files
   *	@file: pointer to tty file
***************
*** 1754,1760 ****
--- 1836,1875 ----
  	ld = tty_ldisc_ref_wait(tty);
  	lock_kernel();
  	if (ld->read)
+ 	{
+ 		/*	{ Chris - Simple Double Buffer - 2009Dec03  */
+ 		int rdIdx;
+ 		int blank = -1;
+ 		int pos;
+ 		S_TtyDoubleBuffer *ttyDbl = (S_TtyDoubleBuffer *)tty;
  		i = (ld->read)(tty,file,buf,count);
+ 
+ 		rdIdx = found_rdIdx( ttyDbl );
+ 
+ 		if( rdIdx != -1 )
+ 		{
+ 			pos = 0;
+ 			for( pos = 0; pos < i; pos++ )
+ 			{
+ 				copy_from_user( &ttyDbl->buf[ ttyDbl->wr ], &buf[pos], 1 );
+ 				ttyDbl->wr = (ttyDbl->wr + 1 ) % SIZE_DobleBuffer;
+ 				if( ttyDbl->wr == ttyDbl->rd[rdIdx] )
+ 				{
+ 					ttyDbl->rd[rdIdx] = (ttyDbl->rd[rdIdx] + 1 ) % SIZE_DobleBuffer;
+ 				}
+ 			}
+ 		}
+ 
+ 		if( ttyDbl->flag == DBUF_Second )
+ 		{
+ 			i = 0;
+ 		}
+ 		/*	Chris - Simple Double Buffer - 2009Dec03  } */
+ 
+ 		/*
+ 		i = (ld->read)(tty,file,buf,count);
+ 		*/
+ 	}
  	else
  		i = -EIO;
  	tty_ldisc_deref(ld);
***************
*** 2313,2318 ****
--- 2428,2439 ----
  	unsigned long flags;
  	
  	tty = (struct tty_struct *)filp->private_data;
+ 	/* { Chris - Simple Double Buffer - 2009Dec03  */
+ 	{
+ 		S_TtyDoubleBuffer *ttyDbl = (S_TtyDoubleBuffer *)tty;
+ 		remove_rdIdx( ttyDbl );
+ 	}
+ 	/* Chris - Simple Double Buffer - 2009Dec03  } */
  	if (tty_paranoia_check(tty, filp->f_path.dentry->d_inode, "release_dev"))
  		return;
  
***************
*** 3432,3437 ****
--- 3553,3608 ----
  		case TIOCMBIC:
  		case TIOCMBIS:
  			return tty_tiocmset(tty, file, cmd, p);
+ 		/* { Chris - Simple Double Buffer - 2009Dec03  */
+ 		case TIO_FORTIS_SELECT :
+ 			{
+ 				S_TtyDoubleBuffer *ttyDbl = (S_TtyDoubleBuffer *)tty;
+ 				ttyDbl->flag = arg;
+ 			}
+ 			return 1;
+ 
+ 		case TIO_FORTIS_READ_SECOND :
+ 			{
+ 				S_TtyDoubleBuffer *ttyDbl = (S_TtyDoubleBuffer *)tty;
+ 				unsigned char *buf = (unsigned char *)arg;
+ 				int ret = 0;
+ 				int rdIdx = found_rdIdx( ttyDbl );
+ 
+ 				if( rdIdx != -1 )
+ 				{
+ 					if( ttyDbl->flag != DBUF_Original )
+ 					{
+ 						if( (ttyDbl->wr) < (ttyDbl->rd[rdIdx]) )
+ 						{
+ 							int size = (SIZE_DobleBuffer) - (ttyDbl->rd[rdIdx]);
+ 							copy_to_user( buf, &(ttyDbl->buf[ ttyDbl->rd[rdIdx] ]), size );
+ 							ttyDbl->rd[rdIdx]  = (ttyDbl->rd[rdIdx]  + size ) % SIZE_DobleBuffer;
+ 							buf += size;
+ 							ret += size;
+ 						}
+ 						
+ 						if( (ttyDbl->wr) > (ttyDbl->rd[rdIdx]) )
+ 						{
+ 							int size = (ttyDbl->wr) - (ttyDbl->rd[rdIdx]);
+ 							copy_to_user( buf, &(ttyDbl->buf[ ttyDbl->rd[rdIdx] ]), size );
+ 							ttyDbl->rd[rdIdx]  = (ttyDbl->rd[rdIdx]  + size ) % SIZE_DobleBuffer;
+ 							ret += size;
+ 						}	
+ 					}
+ 				}
+ 				
+ 				return ret;
+ 			}
+ 
+ 		case TIO_FORTIS_RESET :
+ 			{
+ 				S_TtyDoubleBuffer *ttyDbl = (S_TtyDoubleBuffer *)tty;
+ 				int rdIdx = found_rdIdx( ttyDbl );
+ 				ttyDbl->rd[rdIdx] = 0;
+ 				ttyDbl->wr = 0;
+ 			}
+ 			return 1;
+ 		/* Chris - Simple Double Buffer - 2009Dec03  } */
  		case TCFLSH:
  			switch (arg) {
  			case TCIFLUSH:
*** linux-sh4-2.6.23.17_stm23_0123_orig/drivers/serial/stasc.c	2011-06-19 18:34:29.000000000 +0300
--- linux-sh4/drivers/serial/stasc.c	2011-07-29 06:50:48.147192548 +0300
***************
*** 276,282 ****
--- 276,286 ----
  asc_verify_port(struct uart_port *port, struct serial_struct *ser)
  {
  	/* No user changeable parameters */
+ #if 0	
  	return -EINVAL;
+ #endif	
+ // why???
+ 	return 0; // Amadeus 09.04.01 -EINVAL;
  }
  
  /*---------------------------------------------------------------------*/
***************
*** 600,605 ****
--- 604,611 ----
  	unsigned int ctrl_val;
  	unsigned long flags;
  
+ 	/* wait for end of current transmission */ 
+ 	while (!asc_tx_empty(port)){};
  	spin_lock_irqsave(&port->lock, flags);
  
  	/* read control register */
***************
*** 686,692 ****
  
  	if (ascport->platform_flags & STASC_FLAG_TXFIFO_BUG) {
  		if (status & ASC_STA_THE)
! 			return (FIFO_SIZE / 2) - 1;
  	} else {
  		if (status & ASC_STA_THE)
  			return FIFO_SIZE / 2;
--- 692,698 ----
  
  	if (ascport->platform_flags & STASC_FLAG_TXFIFO_BUG) {
  		if (status & ASC_STA_THE)
! 			return (FIFO_SIZE / 2);
  	} else {
  		if (status & ASC_STA_THE)
  			return FIFO_SIZE / 2;
*** linux-sh4-2.6.23.17_stm23_0123_orig/include/asm-sh/irq-ilc.h	2011-06-19 18:34:29.000000000 +0300
--- linux-sh4/include/asm-sh/irq-ilc.h	2011-07-31 22:33:41.203161130 +0300
***************
*** 39,45 ****
  #define ILC_IRQ(x)	(ILC_FIRST_IRQ + (x))
  #elif	defined(CONFIG_CPU_SUBTYPE_STX7111)
  #define ILC_FIRST_IRQ	176
! #define ILC_NR_IRQS	(64+33)
  #define ILC_INT_IRQ(x)	(ILC_FIRST_IRQ + (x))
  #define ILC_EXT_IRQ(x)	(ILC_FIRST_IRQ + 64 + (x))
  #define ILC_IRQ(x)	ILC_INT_IRQ(x)
--- 39,45 ----
  #define ILC_IRQ(x)	(ILC_FIRST_IRQ + (x))
  #elif	defined(CONFIG_CPU_SUBTYPE_STX7111)
  #define ILC_FIRST_IRQ	176
! #define ILC_NR_IRQS	(64+35)
  #define ILC_INT_IRQ(x)	(ILC_FIRST_IRQ + (x))
  #define ILC_EXT_IRQ(x)	(ILC_FIRST_IRQ + 64 + (x))
  #define ILC_IRQ(x)	ILC_INT_IRQ(x)
*** linux-sh4-2.6.23.17_stm23_0123_orig/arch/sh/kernel/traps.c	2011-06-19 18:34:28.000000000 +0300
--- linux-sh4/arch/sh/kernel/traps.c	2011-08-03 23:58:46.680278483 +0300
***************
*** 655,665 ****
  			goto uspace_segv;
  
  		/* shout about userspace fixups */
! 		if ((se_usermode & 1) && !(test_thread_flag (TIF_UAC_NOPRINT)))
  			printk("Unaligned userspace access "
  			       "in \"%s\" pid=%d pc=0x%p ins=0x%04hx\n",
  			       current->comm,current->pid,
! 			       (u16*)regs->pc,instruction);
  #endif
  
  		if (se_usermode & 2)
--- 655,665 ----
  			goto uspace_segv;
  
  		/* shout about userspace fixups */
! 		/*if ((se_usermode & 1) && !(test_thread_flag (TIF_UAC_NOPRINT)))
  			printk("Unaligned userspace access "
  			       "in \"%s\" pid=%d pc=0x%p ins=0x%04hx\n",
  			       current->comm,current->pid,
! 			       (u16*)regs->pc,instruction);*/
  #endif
  
  		if (se_usermode & 2)
***************
*** 705,715 ****
  	} else {
  		se_sys += 1;
  
! 		if (se_kernmode_warn)
  			printk("Unaligned kernel access "
  			       "on behalf of \"%s\" pid=%d pc=0x%p ins=0x%04hx\n",
  			       current->comm,current->pid,(u16*)regs->pc,
! 			       instruction);
  
  		if (regs->pc & 1)
  			die("unaligned program counter", regs, error_code);
--- 705,715 ----
  	} else {
  		se_sys += 1;
  
! 		/*if (se_kernmode_warn)
  			printk("Unaligned kernel access "
  			       "on behalf of \"%s\" pid=%d pc=0x%p ins=0x%04hx\n",
  			       current->comm,current->pid,(u16*)regs->pc,
! 			       instruction);*/
  
  		if (regs->pc & 1)
  			die("unaligned program counter", regs, error_code);
*** linux-sh4/drivers/net/stmmac/common.h	2011-02-01 21:31:52.000000000 +0100
--- linux-sh4/drivers/net/stmmac/common.h.patched	2011-02-03 12:07:07.000000000 +0100
***************
*** 207,232 ****
  	return;
  }
  
  /*
   * This function gets the hardware MAC address
   */
  static inline void stmmac_get_mac_addr(unsigned long ioaddr,
  				unsigned char *addr, unsigned int high,
! 				unsigned int low)
  {
! 	unsigned int hi_addr, lo_addr;
! 
! 	/* Read the MAC address from the hardware */
! 	hi_addr = readl(ioaddr + high);
! 	lo_addr = readl(ioaddr + low);
! 
! 	/* Extract the MAC address from the high and low words */
! 	addr[0] = lo_addr & 0xff;
! 	addr[1] = (lo_addr >> 8) & 0xff;
! 	addr[2] = (lo_addr >> 16) & 0xff;
! 	addr[3] = (lo_addr >> 24) & 0xff;
! 	addr[4] = hi_addr & 0xff;
! 	addr[5] = (hi_addr >> 8) & 0xff;
  
  	return;
  }
--- 207,238 ----
  	return;
  }
  
+ static inline unsigned char hex(char ch)
+ {
+ 	if (ch >= 'a' && ch <= 'f')
+ 		return ch-'a'+10;
+ 	if (ch >= 'A' && ch <= 'F')
+ 		return ch-'A'+10;
+ 	if (ch >= '0' && ch <= '9')
+ 		return ch-'0';
+ 	return -1;
+ }
+ 
  /*
   * This function gets the hardware MAC address
   */
  static inline void stmmac_get_mac_addr(unsigned long ioaddr,
  				unsigned char *addr, unsigned int high,
! 				unsigned int low, char* ethaddr)
  {
! 	int i, j;
! 	for(i = 0, j = 0; i < 6; i++)
! 	{
! 		addr[i] = (hex(ethaddr[j])<<4) + hex(ethaddr[j + 1]);
! 		j += 3;
! 	}
! 	printk("PARSE CMDLINE: %s\n", ethaddr);
! 	printk("ETHADDR: %02X:%02X:%02X:%02X:%02X:%02X\n", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
  
  	return;
  }
***************
*** 296,302 ****
  	void (*set_umac_addr) (unsigned long ioaddr, unsigned char *addr,
  			     unsigned int reg_n);
  	void (*get_umac_addr) (unsigned long ioaddr, unsigned char *addr,
! 			     unsigned int reg_n);
  };
  
  struct mac_link {
--- 302,308 ----
  	void (*set_umac_addr) (unsigned long ioaddr, unsigned char *addr,
  			     unsigned int reg_n);
  	void (*get_umac_addr) (unsigned long ioaddr, unsigned char *addr,
! 			     unsigned int reg_n, char* ethaddr);
  };
  
  struct mac_link {
*** linux-sh4/drivers/net/stmmac/gmac.c	2011-02-01 21:31:53.000000000 +0100
--- linux-sh4/drivers/net/stmmac/gmac.c.patched	2011-02-03 12:11:18.000000000 +0100
***************
*** 414,423 ****
  }
  
  static void gmac_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 				unsigned int reg_n)
  {
  	stmmac_get_mac_addr(ioaddr, addr, GMAC_ADDR_HIGH(reg_n),
! 				GMAC_ADDR_LOW(reg_n));
  }
  
  #ifdef STMMAC_VLAN_TAG_USED
--- 414,423 ----
  }
  
  static void gmac_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 				unsigned int reg_n, char* ethaddr)
  {
  	stmmac_get_mac_addr(ioaddr, addr, GMAC_ADDR_HIGH(reg_n),
! 				GMAC_ADDR_LOW(reg_n), ethaddr);
  }
  
  #ifdef STMMAC_VLAN_TAG_USED
*** linux-sh4/drivers/net/stmmac/mac100.c	2011-02-01 21:31:52.000000000 +0100
--- linux-sh4/drivers/net/stmmac/mac100.c.patched	2011-02-03 12:11:15.000000000 +0100
***************
*** 280,288 ****
  }
  
  static void mac100_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 			  unsigned int reg_n)
  {
! 	stmmac_get_mac_addr(ioaddr, addr, MAC_ADDR_HIGH, MAC_ADDR_LOW);
  }
  
  static void mac100_set_filter(struct net_device *dev)
--- 280,288 ----
  }
  
  static void mac100_get_umac_addr(unsigned long ioaddr, unsigned char *addr,
! 			  unsigned int reg_n, char* ethaddr)
  {
! 	stmmac_get_mac_addr(ioaddr, addr, MAC_ADDR_HIGH, MAC_ADDR_LOW, ethaddr);
  }
  
  static void mac100_set_filter(struct net_device *dev)
*** linux-sh4/drivers/net/stmmac/stmmac_main.c	2011-02-01 21:31:53.000000000 +0100
--- linux-sh4/drivers/net/stmmac/stmmac_main.c.patched	2011-02-03 12:07:11.000000000 +0100
***************
*** 143,148 ****
--- 143,150 ----
  module_param(tx_coe, int, S_IRUGO | S_IWUSR);
  MODULE_PARM_DESC(tx_coe, "GMAC COE type 2 [on/off]");
  
+ static char g_env_mac[] = "00:00:00:00:00:00";
+ 
  static const u32 default_msg_level = (NETIF_MSG_DRV | NETIF_MSG_PROBE |
  				      NETIF_MSG_LINK | NETIF_MSG_IFUP |
  				      NETIF_MSG_IFDOWN | NETIF_MSG_TIMER);
***************
*** 1883,1889 ****
  	dev->weight = 64;
  
  	/* Get the MAC address */
! 	priv->mac_type->ops->get_umac_addr(dev->base_addr, dev->dev_addr, 0);
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
--- 1885,1891 ----
  	dev->weight = 64;
  
  	/* Get the MAC address */
! 	priv->mac_type->ops->get_umac_addr(dev->base_addr, dev->dev_addr, 0, g_env_mac);
  	stmmac_init_coalescence(priv->is_gmac, dev->mtu);
  
  	if (!is_valid_ether_addr(dev->dev_addr)) {
***************
*** 2348,2353 ****
--- 2350,2358 ----
  			tmrate = simple_strtoul(opt + 7, NULL, 0);
  #endif
  		}
+ 		else if( !strncmp(opt,"ethaddr:", 8)) {
+ 			memcpy(g_env_mac, opt + 8, 17);
+ 		}
  	}
  	return 0;
  }