*** a/arch/sh/kernel/setup.c	2012-03-31 15:26:54.000000000 +0100
--- a/arch/sh/kernel/setup.c.patched	2012-03-31 15:26:54.340928000 +0100
***************
*** 389,394 ****
--- 389,422 ----
  #endif
  #endif
  
+ 	{
+ 	char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+ 	char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock2 rootfstype=squashfs init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 console_loglevel=7 stmmaceth=ethaddr:";
+ 	char mac[] = "00:00:00:00:00:00";
+ 	int command_line_len = strlen(command_line);
+ 	int org_command_line_len = strlen(org_command_line);
+ 
+ 	if(command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+ 	{
+ 		int i;
+ 		for(i = 0; i < (command_line_len - 7); i++)
+ 		{
+ 			if(!strncmp(command_line + i, "ethaddr", 7))
+ 			{
+ 				strlcpy(mac, command_line + i + 8, sizeof(mac));
+ 				break;
+ 			}
+ 			if(!strncmp(command_line + i, "hwaddr", 6))
+ 			{
+ 				strlcpy(mac, command_line + i + 7, sizeof(mac));
+ 				break;
+ 			}
+ 		}
+ 		strlcpy(command_line, tdt_command_line, sizeof(command_line));
+ 		strlcat(command_line, mac, sizeof(command_line));
+ 	}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;

--- linux-sh4/arch/sh/boards/mach-sat7111/setup.c	2013-03-25 15:00:47.000000000 +0100
+++ linux-sh4/arch/sh/boards/mach-sat7111/setup.c.patched	2013-08-08 16:16:24.000000000 +0200
@@ -28,13 +28,14 @@
 #include <linux/mtd/nand.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/partitions.h>
-#include <linux/spi/spi.h>
-#include <linux/spi/flash.h>
 #include <asm/irq-ilc.h>
 #include <asm/irl.h>
 #include <sound/stm.h>
+#include <linux/bpa2.h>
 
-#define SAT7111_PHY_RESET stm_gpio(2, 4)
+#define SAT7111_USB_RESET stm_gpio(3, 5)
+#define SAT7111_FLASH_VPP stm_gpio(3, 6)
+#define SAT7111_PHY_RESET stm_gpio(4, 4)
 
 /* The sat7111 board is populated with NOR, NAND, and Serial Flash.  The setup
  * below assumes the board is in its default boot-from-NOR configuration.  Other
@@ -43,6 +44,32 @@
  * been fully tested.
  */
 
+const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers", "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
+
+/*
+0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
+0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
+0x40800000 - 0x47FFFFFF - linux   (120mb)
+0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
+0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
+*/
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+    {
+ 	    .name  = "bigphysarea",
+ 	    .start = 0x48000000,
+ 	    .size  = 0x02000000, /* 32 Mb */
+ 	    .flags = 0,
+ 	    .aka   = NULL
+    },
+    {
+ 	    .name  = "LMI_IO",
+ 	    .start = 0x4A000000,
+ 	    .size  = 0x06000000, /* 96 Mb */
+ 	    .flags = 0,
+ 	    .aka   = LMI_IO_partalias
+    },
+ };
+
 static void __init sat7111_setup(char** cmdline_p)
 {
 	printk(KERN_INFO "STMicroelectronics sat7111 reference board initialisation\n");
@@ -50,15 +77,16 @@
 	stx7111_early_device_init();
 
 	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
-			.hw_flow_control = 1,
+			.hw_flow_control = 0,
 			.is_console = 1, });
+#if 0
 	stx7111_configure_asc(3, &(struct stx7111_asc_config) {
-			.hw_flow_control = 1,
+			.hw_flow_control = 0,
 			.is_console = 0, });
+#endif
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
-
-
 static struct platform_device sat7111_leds = {
 	.name = "leds-gpio",
 	.id = -1,
@@ -77,8 +105,6 @@
 	},
 };
 
-
-
 static struct gpio_keys_button sat7111_buttons[] = {
 	{
 		.code = BTN_0,
@@ -109,6 +135,41 @@
 	},
 };
 
+/* enable NOR Flash */
+static void sat7111_nor_set_vpp(struct map_info *info, int enable)
+{
+	gpio_set_value(SAT7111_FLASH_VPP, enable);
+}
+
+// Nor Flash Configuration
+static struct mtd_partition nor_parts[] = {
+	{
+		.name   = "NOR U-BOOT",
+		.size   = 0x60000,
+		.offset = 0
+	},
+	{
+		.name = "NOR KERNEL",
+		.size = 0x2a0000,
+		.offset = 0x60000
+	},
+	{
+		.name = "NOR ROOT",
+		.size = 0xcc0000,
+		.offset = 0x300000
+	},
+	{
+		.name = "NOR VAR",
+		.size = MTDPART_SIZ_FULL,
+		.offset = 0xfc0000, 
+	},
+	{
+		.name = "NOR FULL",
+		.size = MTDPART_SIZ_FULL,
+		.offset = 0x60000
+	}
+};
+
 static struct platform_device sat7111_nor_flash = {
 	.name		= "physmap-flash",
 	.id		= -1,
@@ -118,77 +179,64 @@
 	},
 	.dev.platform_data = &(struct physmap_flash_data) {
 		.width		= 2,
-		.nr_parts	= 3,
-		.parts		=  (struct mtd_partition []) {
-			{
-				.name = "NOR Flash 1",
-				.size = 0x00080000,
-				.offset = 0x00000000,
-			}, {
-				.name = "NOR Flash 2",
-				.size = 0x00200000,
-				.offset = MTDPART_OFS_NXTBLK,
-			}, {
-				.name = "NOR Flash 3",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
-
-
+		.nr_parts	= ARRAY_SIZE(nor_parts),
+		.parts		= nor_parts
 	},
 };
 
-struct stm_nand_bank_data sat7111_nand_flash = {
+// Nand Flash Configuration
+static struct mtd_partition nand_parts[] = {
+#ifdef ORIGINAL_MTD
+	 {
+	 .name = "NAND KERNEL    0x0000.0000-0x002F.FFFF",
+	 .size = 0x300000,
+	 .offset = 0
+	 }, {
+	 .name = "NAND ROOT      0x0030.0000-0x027F.FFFF",
+	 .size = 0x2500000,
+	 .offset = 0x300000
+	 }, {
+	 .name = "NAND CONFIG    0x0280.0000-0x04FF.FFFF",
+	 .size = 0x2800000,
+	 .offset = 0x2800000
+	 }, {
+	 .name = "NAND DATA      0x0500.0000-0x07FF.FFFF",
+	 .size = MTDPART_SIZ_FULL,	/* will expand to the end of the flash */
+	 .offset = 0x05000000
+	 }
+#else
+	 {
+	 .name   = "NAND SWAP",
+	 .size   = MTDPART_SIZ_FULL,
+	 .offset = MTDPART_OFS_APPEND
+	 }
+#endif
+};
+static struct stm_nand_bank_data nand_bank_data = {
 	.csn		= 1,
+	.nr_partitions	= ARRAY_SIZE(nand_parts),
+	.partitions	= nand_parts,
 	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
-	.nr_partitions	= 2,
-	.partitions	= (struct mtd_partition []) {
-		{
-			.name	= "NAND Flash 1",
-			.offset	= 0,
-			.size 	= 0x00800000
-		}, {
-			.name	= "NAND Flash 2",
-			.offset = MTDPART_OFS_NXTBLK,
-			.size	= MTDPART_SIZ_FULL
-		},
-	},
 	.timing_data	= &(struct stm_nand_timing_data) {
 		.sig_setup	= 50,		/* times in ns */
 		.sig_hold	= 50,
 		.CE_deassert	= 0,
 		.WE_to_RBn	= 100,
 		.wr_on		= 10,
-		.wr_off		= 40,
+		.wr_off		= 30,
 		.rd_on		= 10,
-		.rd_off		= 40,
-		.chip_delay	= 30,		/* in us */
+		.rd_off		= 30,
+		.chip_delay	= 50,		/* in us */
 	},
+	.emi_withinbankoffset	= 0,
 };
 
-/* Serial Flash */
-static struct spi_board_info sat7111_serial_flash = {
-	.modalias       = "m25p80",
-	.bus_num        = 0,
-	.chip_select    = stm_gpio(6, 7),
-	.max_speed_hz   = 7000000,
-	.mode           = SPI_MODE_3,
-	.platform_data  = &(struct flash_platform_data) {
-		.name = "m25p80",
-		.type = "m25p16",
-		.nr_parts	= 2,
-		.parts = (struct mtd_partition []) {
-			{
-				.name = "Serial Flash 1",
-				.size = 0x00080000,
-				.offset = 0,
-			}, {
-				.name = "Serial Flash 2",
-				.size = MTDPART_SIZ_FULL,
-				.offset = MTDPART_OFS_NXTBLK,
-			},
-		},
+static struct platform_device sat7111_nand_device = {
+	.name		= "stm-nand-emi",
+	.dev.platform_data = &(struct stm_plat_nand_emi_data){
+		.nr_banks	= 1,
+		.banks		= &nand_bank_data,
+		.emi_rbn_gpio	= -1,
 	},
 };
 
@@ -208,23 +256,36 @@
 	.phy_mask = 0,
 };
 
+static struct platform_device sat7111_epld_device = {
+	.name		= "epld",
+	.id		= -1,
+	.num_resources	= 1,
+	.resource	= (struct resource[]) {
+		{
+			.start	= 0x06000000,
+			/* Minimum size to ensure mapped by PMB */
+			.end	= 0x06000000+(8*1024*1024)-1,
+			.flags	= IORESOURCE_MEM,
+		}
+	},
+	.dev.platform_data = &(struct plat_epld_data) {
+//		 .opsize = 8,
+	},
+};
+
 static struct platform_device *sat7111_devices[] __initdata = {
+//	&sat7111_epld_device,
 	&sat7111_leds,
 	&sat7111_nor_flash,
 	&sat7111_button_device,
+	&sat7111_nand_device,
 };
 
 static int __init sat7111_devices_init(void)
 {
-	int peripherals_i2c_bus;
-
-	stx7111_configure_pwm(&(struct stx7111_pwm_config) {
-			.out0_enabled = 1,
-			.out1_enabled = 0, });
-
-	stx7111_configure_ssc_spi(0, NULL);
+	stx7111_configure_ssc_i2c(0, NULL);
 	stx7111_configure_ssc_i2c(1, NULL); /* J12=1-2, J16=1-2 */
-	peripherals_i2c_bus = stx7111_configure_ssc_i2c(2, NULL);
+	stx7111_configure_ssc_i2c(2, NULL);
 	stx7111_configure_ssc_i2c(3, NULL);
 
 	stx7111_configure_usb(&(struct stx7111_usb_config) {
@@ -246,14 +307,6 @@
 
 	gpio_direction_output(SAT7111_PHY_RESET, 0);
 
-	stx7111_configure_nand(&(struct stm_nand_config) {
-			.driver = stm_nand_flex,
-			.nr_banks = 1,
-			.banks = &sat7111_nand_flash,
-			.rbn.flex_connected = 1,});
-
-	spi_register_board_info(&sat7111_serial_flash, 1);
-
 	return platform_add_devices(sat7111_devices,
 				    ARRAY_SIZE(sat7111_devices));
 }
--- linux-sh4/drivers/stm/gpio.c	2012-03-31 15:26:55.000000000 +0200
+++ linux-sh4/drivers/stm/gpio.c.patched	2012-07-08 17:17:27.000000000 +0200
@@ -27,6 +27,10 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/pad.h>
 #include <linux/stm/pio.h>
+#ifdef CONFIG_PROC_FS
+#include <linux/proc_fs.h>
+#include <linux/kallsyms.h>
+#endif
 #include <linux/stm/pm_sys.h>
 #include "reg_pio.h"
 
@@ -34,6 +38,7 @@
 
 struct stpio_pin {
 #ifdef CONFIG_STPIO
+	const char *pin_name;
 	void (*func)(struct stpio_pin *pin, void *dev);
 	void* dev;
 	unsigned short port_no, pin_no;
@@ -52,6 +57,7 @@
 #ifdef CONFIG_HIBERNATION
 	unsigned char pm_saved_data;
 #endif
+	unsigned char direction;
 	struct stpio_pin stpio;
 };
 
@@ -392,6 +398,9 @@
 
 	gpio_pm_set_direction(&port->pins[offset], direction);
 	set__PIO_PCx(port->base, offset, direction);
+
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
 }
 
 
@@ -510,6 +519,10 @@
 
 void stpio_free_pin(struct stpio_pin *pin)
 {
+ 	stpio_configure_pin(pin, STPIO_IN);
+ 	pin->pin_name = NULL;
+ 	pin->func = 0;
+ 	pin->dev = 0;
 	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
 }
 EXPORT_SYMBOL(stpio_free_pin);
@@ -624,6 +637,85 @@
 	set_irq_type(irq, triggertype);
 }
 EXPORT_SYMBOL(stpio_set_irq_type);
+ #ifdef CONFIG_PROC_FS
+ 
+ static struct proc_dir_entry *proc_stpio;
+ 
+ static inline const char *stpio_get_direction_name(unsigned int direction)
+ {
+ 	switch (direction) {
+ 	case STPIO_NONPIO:		return "IN  (pull-up)      ";
+ 	case STPIO_BIDIR:		return "BI  (open-drain)   ";
+ 	case STPIO_OUT:			return "OUT (push-pull)    ";
+ 	case STPIO_IN:			return "IN  (Hi-Z)         ";
+ 	case STPIO_ALT_OUT:		return "Alt-OUT (push-pull)";
+ 	case STPIO_ALT_BIDIR:	return "Alt-BI (open-drain)";
+ 	default:				return "forbidden          ";
+ 	}
+ };
+ 
+ static inline const char *stpio_get_handler_name(void *func)
+ {
+ 	static char sym_name[KSYM_NAME_LEN];
+ 	char *modname;
+ 	unsigned long symbolsize, offset;
+ 	const char *symb;
+ 
+ 	if (func == NULL)
+ 		return "";
+ 
+ 	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+ 			&modname, sym_name);
+ 
+ 	return symb ? symb : "???";
+ }
+ 
+ static int stpio_read_proc(char *page, char **start, off_t off, int count,
+ 		int *eof, void *data_unused)
+ {
+ 	int len;
+ 	int port_no, pin_no;
+ 	off_t begin = 0;
+ 	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+ 	struct stm_gpio_port *port;
+ 	struct stm_gpio_pin *pin;
+ 
+ 	len = sprintf(page, "  port      name          direction\n");
+ 	for (port_no = 0; port_no < num_ports; port_no++)
+ 	{
+ 		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++) {
+ 
+ 			port = &stm_gpio_ports[port_no];
+ 			if(!port) continue;
+ 
+ 			pin = &port->pins[pin_no];
+ 			if(!pin) continue;
+ 
+ 			char *name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+ 			len += sprintf(page + len,
+ 					"PIO %d.%d [%-10s] [%s] [%s]\n",
+ 					port_no, pin_no, name,
+ 					stpio_get_direction_name(pin->direction),
+ 					stpio_get_handler_name(pin->stpio.func));
+  			if (len + begin > off + count)
+ 				goto done;
+ 			if (len + begin < off) {
+ 				begin += len;
+ 				len = 0;
+ 			}
+ 		}
+ 	}
+ 
+ 	*eof = 1;
+ 
+ done:
+ 	if (off >= len + begin)
+ 		return 0;
+ 	*start = page + (off - begin);
+ 	return ((count < begin + len - off) ? count : begin + len - off);
+ }
+ 
+ #endif /* CONFIG_PROC_FS */
 
 #endif /* CONFIG_STPIO */
 
@@ -1031,7 +1123,11 @@
 static int __init stm_gpio_init(void)
 {
 	int ret;
-
+ #ifdef CONFIG_PROC_FS
+ 	proc_stpio = create_proc_entry("stpio", 0, NULL);
+ 	if (proc_stpio)
+ 		proc_stpio->read_proc = stpio_read_proc;
+ #endif
 	ret = platform_driver_register(&stm_gpio_driver);
 	if (ret)
 		return ret;

*** linux-sh4/drivers/net/phy/phy_device.c	2012-03-31 15:26:54.440157990 +0300
--- linux-sh4/drivers/net/phy/phy_device.c.patched	2012-03-31 15:26:54.308158605 +0300
***************
*** 962,968 ****
  		return retval;
  	}
  
! 	pr_debug("%s: Registered new driver\n", new_driver->name);
  
  	return 0;
  }
--- 962,968 ----
  		return retval;
  	}
  
! 	pr_info("%s: Registered new driver (0x%08x)\n", new_driver->name, new_driver->phy_id);
  
  	return 0;
  }

*** linux-sh4/drivers/net/stmmac/stmmac_mdio.c	2012-03-31 15:26:54.233314199 +0300
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c.patched	2012-03-31 15:26:54.531239690 +0300
***************
*** 169,174 ****
--- 169,175 ----
  	priv->mii = new_bus;
  
  	found = 0;
+ 
  	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
***************
*** 191,202 ****
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
! 			    (priv->plat->phy_addr == -1))
  				priv->plat->phy_addr = addr;
  
- 			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
- 				(priv->plat->phy_addr == addr);
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";
--- 192,213 ----
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 
! 			act = 0;
! 
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && (/*(priv->plat->phy_addr == -1) ||*/
! 					(phydev->phy_id == 0x0181b880) || // Davicom DM9161E
! 					(phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
! 					(phydev->phy_id == 0x00181b80) || // Davicom DM9131
! 					(phydev->phy_id == 0x1c040011) || // STe100p
! 					(phydev->phy_id == 0x00061c50) || // STe101p
! 					(phydev->phy_id == 0x00008201) || (phydev->phy_id == 0x0007c0f1) ||
! 					(phydev->phy_id == 0x001cc912)))  // RTL821x
! 			{
  				priv->plat->phy_addr = addr;
+ 				act=1;
+ 			}
  
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";

--- linux-sh/drivers/serial/stm-asc.c	2013-03-25 15:00:52.000000000 +0100
+++ linux-sh/drivers/serial/stm-asc.c.patched	2013-04-09 03:37:37.000000000 +0200
@@ -543,17 +543,19 @@
 	ret = uart_register_driver(&asc_uart_driver);
 	if (ret)
 		return ret;
-
+#if 1
 	ret = platform_driver_register(&asc_serial_driver);
 	if (ret)
 		uart_unregister_driver(&asc_uart_driver);
-
+#endif
 	return ret;
 }
 
 static void __exit asc_exit(void)
 {
+#if 1
 	platform_driver_unregister(&asc_serial_driver);
+#endif
 	uart_unregister_driver(&asc_uart_driver);
 }

--- linux-sh/drivers/mtd/chips/cfi_cmdset_0002.c	2013-04-11 18:53:02.000000000 +0200
+++ linux-sh/drivers/mtd/chips/cfi_cmdset_0002.c.patched	2013-04-12 00:17:17.000000000 +0200
@@ -388,7 +388,7 @@
 		cfi_fixup_major_minor(cfi, extp);
 
 		if (extp->MajorVersion != '1' ||
-		    (extp->MinorVersion < '0' || extp->MinorVersion > '4')) {
+		    (extp->MinorVersion < '0' || extp->MinorVersion > '5')) {
 			printk(KERN_ERR "  Unknown Amd/Fujitsu Extended Query "
 			       "version %c.%c.\n",  extp->MajorVersion,
 			       extp->MinorVersion);
diff -crp linux-sh4-2.6.32.59_stm24_0211/drivers/mtd/nand/nand_base.c linux-sh4-2.6.32.59_stm24_0211/drivers/mtd/nand/nand_base.c
*** linux-sh4-2.6.32.59_stm24_0211/drivers/mtd/nand/nand_base.c	2012-09-14 12:32:12.000000000 +0200
--- linux-sh4-2.6.32.59_stm24_0211/drivers/mtd/nand/nand_base.c	2012-09-14 13:22:11.000000000 +0200
*************** int nand_do_read_ops(struct mtd_info *mt
*** 1379,1398 ****
  
  			/* Now read the page into the buffer */
  			if (unlikely(ops->mode == MTD_OOB_RAW))
! 				ret = chip->ecc.read_page_raw(mtd, chip,
! 							      bufpoi, page);
! 			else if (!aligned && NAND_SUBPAGE_READ(chip) && !oob)
! 				ret = chip->ecc.read_subpage(mtd, chip, col, bytes, bufpoi);
  			else
! 				ret = chip->ecc.read_page(mtd, chip, bufpoi,
! 							  page);
  			if (ret < 0)
  				break;
  
  			/* Transfer not aligned data */
  			if (!aligned) {
! 				if (!NAND_SUBPAGE_READ(chip) && !oob)
! 					chip->pagebuf = realpage;
  				memcpy(buf, chip->buffers->databuf + col, bytes);
  			}
  
--- 1379,1393 ----
  
  			/* Now read the page into the buffer */
  			if (unlikely(ops->mode == MTD_OOB_RAW))
! 				ret = chip->ecc.read_page_raw(mtd, chip,bufpoi, page);
  			else
! 				ret = chip->ecc.read_page(mtd, chip, bufpoi, page);
  			if (ret < 0)
  				break;
  
  			/* Transfer not aligned data */
  			if (!aligned) {
! 				chip->pagebuf = realpage;
  				memcpy(buf, chip->buffers->databuf + col, bytes);
  			}
  
*************** static struct nand_flash_dev *nand_get_f
*** 2906,2913 ****
  	/* Decode ID string */
  	if (nand_decode_id(mtd, chip, type, id_data, 8) != 0) {
  		printk(KERN_INFO "Failed to decode NAND READID "
! 		       "[%02x %02x %02x %02x]\n",
! 		       id_data[0], id_data[1], id_data[2], id_data[3]);
  		return ERR_PTR(-EINVAL);
  	}
  
--- 2901,2908 ----
  	/* Decode ID string */
  	if (nand_decode_id(mtd, chip, type, id_data, 8) != 0) {
  		printk(KERN_INFO "Failed to decode NAND READID "
! 		       "[%02x %02x %02x %02x %02x]\n",
! 		       id_data[0], id_data[1], id_data[2], id_data[3], id_data[4] );
  		return ERR_PTR(-EINVAL);
  	}
  
diff -crp linux-sh4-2.6.32.59_stm24_0211/drivers/mtd/nand/nand_ecc.c linux-sh4-2.6.32.59_stm24_0211/drivers/mtd/nand/nand_ecc.c
*** linux-sh4-2.6.32.59_stm24_0211/drivers/mtd/nand/nand_ecc.c	2012-09-14 12:32:12.000000000 +0200
--- linux-sh4-2.6.32.59_stm24_0211/drivers/mtd/nand/nand_ecc.c	2012-09-14 13:22:11.000000000 +0200
*************** int __nand_correct_data(unsigned char *b
*** 492,503 ****
  	}
  	/* count nr of bits; use table lookup, faster than calculating it */
  	if ((bitsperbyte[b0] + bitsperbyte[b1] + bitsperbyte[b2]) == 1) {
! 		printk(KERN_DEBUG "%s: ignoring error in ECC, data ok: [",
! 		       __func__);
  		return 1;	/* error in ecc data; no action needed */
  	}
  
! 	printk(KERN_ERR "%s: uncorrectable error: [", __func__);
  	return -1;
  }
  EXPORT_SYMBOL(__nand_correct_data);
--- 492,503 ----
  	}
  	/* count nr of bits; use table lookup, faster than calculating it */
  	if ((bitsperbyte[b0] + bitsperbyte[b1] + bitsperbyte[b2]) == 1) {
! 		/*printk(KERN_DEBUG "%s: ignoring error in ECC, data ok: [",
! 		       __func__);*/
  		return 1;	/* error in ecc data; no action needed */
  	}
  
! 	//printk(KERN_ERR "%s: uncorrectable error: [", __func__);
  	return -1;
  }
  EXPORT_SYMBOL(__nand_correct_data);

