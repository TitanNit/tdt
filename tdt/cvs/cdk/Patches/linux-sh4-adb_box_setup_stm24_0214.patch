diff -Nur linux-sh4-2.6.32.28_stm24_0207_orig/arch/sh/boards/mach-mb442/setup.c linux-sh4/arch/sh/boards/mach-mb442/setup.c
--- linux-sh4-2.6.32.28_stm24_0207_orig/arch/sh/boards/mach-mb442/setup.c	2011-09-08 14:15:40.000000000 +0200
+++ linux-sh4/arch/sh/boards/mach-mb442/setup.c	2011-11-01 21:26:59.000000000 +0100
@@ -18,17 +18,37 @@
 #include <linux/delay.h>
 #include <linux/spi/spi.h>
 #include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h> 
+#include <linux/stm/nand.h> 
+#include <linux/mtd/partitions.h> 
 #include <linux/mtd/physmap.h>
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
-
-
-
-#define MB442_PIO_STE100P_RESET stm_gpio(2, 4)
-#define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
-#define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
-
+#include <linux/bpa2.h>
+#include <linux/stm/emi.h>
+#include <linux/stm/gpio.h> 
+
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", "v4l2-coded-video-buffers", NULL };
+
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", NULL };
+
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+      {
+                .name  = "LMI_VID",
+                .start = 0x10800000,
+                .size  = 0x03800000,
+                .flags = 0,
+                .aka   = LMI_VID_partalias
+            },
+            {
+                .name  = "LMI_SYS",
+                .start = 0,
+                .size  = 0x01C00000,
+                .flags = 0,
+                .aka   = LMI_SYS_partalias
+            }
+        };
 
 
 void __init mb442_setup(char** cmdline_p)
@@ -43,17 +63,18 @@
 	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
 			.is_console = 0, });
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
 static struct resource mb442_smc91x_resources[] = {
 	[0] = {
-		.start	= 0x02000300,
-		.end	= 0x02000300 + 0xff,
+		.start	= 0x00c00000,
+		.end	= 0x00c3ffff,
 		.flags	= IORESOURCE_MEM,
 	},
 	[1] = {
-		.start	= IRL0_IRQ,
-		.end	= IRL0_IRQ,
+		.start	= IRL1_IRQ,
+		.end	= IRL1_IRQ,
 		.flags	= IORESOURCE_IRQ,
 	},
 };
@@ -65,52 +86,91 @@
 	.resource	= mb442_smc91x_resources,
 };
 
-static void mb442_set_vpp(struct map_info *info, int enable)
+static struct resource physmap_flash_resource = {
+	.start		= 0x00000000,
+	.end		= 0x001FFFFF,
+	.flags		= IORESOURCE_MEM,
+};
+
+static struct mtd_partition mtd_parts_table[2] = {
 {
-	gpio_set_value(MB442_PIO_FLASH_VPP, enable);
-}
+        .name = "U-Boot firmware 192kB", // U-boot od A0200000 do A0220000
+        .size = 0x00030000,
+        .offset = 0x00000000,
+    }, {
+        .name = "U-Boot env 64kB",
+        .size = 0x00010000,
+        .offset = 0x00040000,
+    }
+  };
+
+static struct physmap_flash_data physmap_flash_data = {
+	.width		= 2, 
+	.parts		= mtd_parts_table, 
+	.nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	.parts		= mtd_parts_table
+}; 
 
-static struct platform_device mb442_physmap_flash = {
+static struct platform_device physmap_flash = {
 	.name		= "physmap-flash",
 	.id		= -1,
-	.num_resources	= 1,
-	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
+	.dev		= { 
+	.platform_data	= &physmap_flash_data,
 	},
-	.dev.platform_data = &(struct physmap_flash_data) {
-		.width		= 2,
-		.set_vpp	= mb442_set_vpp,
-	},
-};
+	.num_resources	= 1,
+	.resource	= &physmap_flash_resource,
+}; 
 
+static struct mtd_partition mb442_nand_flash_partitions[] = {
 
-static int mb442_phy_reset(void* bus)
 {
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
+	.name	= "NAND1 uImage 3MB",
+	.offset	= 0,
+	.size 	= 0x00300000,
+	}, {
+	.name	= "NAND1 RootFS 61MB",
+	.offset	= MTDPART_OFS_APPEND,
+	.size	= MTDPART_SIZ_FULL,
+	},
+};
 
-	return 1;
-}
+struct stm_nand_bank_data nand_bank_data = {
 
-#define STMMAC_PHY_ADDR 14
-static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
-	[STMMAC_PHY_ADDR] = IRL3_IRQ,
-};
-static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
-	.bus_id = 0,
-	.phy_reset = mb442_phy_reset,
-	.phy_mask = 1,
-	.irqs = stmmac_phy_irqs,
+	.csn		= 1,
+	.nr_partitions	= ARRAY_SIZE(mb442_nand_flash_partitions),
+	.partitions	= mb442_nand_flash_partitions,
+	.options	= NAND_NO_AUTOINCR,
+	.timing_data	= &(struct stm_nand_timing_data) {
+	.sig_setup	= 40,		/* times in ns */
+	.sig_hold	= 40,
+	.CE_deassert	= 0,
+	.WE_to_RBn	= 100,
+	.wr_on		= 0,
+	.wr_off		= 10,
+	.rd_on		= 0,
+	.rd_off		= 10,
+	.chip_delay	= 25,			/* in us */
+},
+	.emi_withinbankoffset	= 0,
+};
+
+static struct platform_device mb442_nand_device = { 
+	.name		= "stm-nand-emi", 
+	.dev.platform_data = &(struct stm_plat_nand_emi_data){ 
+	.nr_banks	= 1,
+	.banks		= &nand_bank_data,
+	.emi_rbn_gpio	= stm_gpio(4, 5), 
+	},
 };
 
 static struct platform_device *mb442_devices[] __initdata = {
 	&mb442_smc91x_device,
-	&mb442_physmap_flash,
+        &physmap_flash,
+	&mb442_nand_device,
+       
 };
 
+
 static int __init mb442_device_init(void)
 {
 	stx7100_configure_sata();
@@ -120,8 +180,7 @@
 			.out1_enabled = 1, });
 
 	stx7100_configure_ssc_i2c(0, NULL);
-	stx7100_configure_ssc_spi(1, NULL);
-	stx7100_configure_ssc_i2c(2, NULL);
+	stx7100_configure_ssc_i2c(1, NULL);
 
 	stx7100_configure_usb();
 
@@ -130,32 +189,6 @@
 			.tx_enabled = 0,
 			.tx_od_enabled = 0, });
 
-	stx7100_configure_pata(&(struct stx7100_pata_config) {
-			.emi_bank = 3,
-			.pc_mode = 1,
-			.irq = IRL1_IRQ, });
-
-	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
-	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
-
-	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
-	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
-
-	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
-			.mode = stx7100_ethernet_mode_mii,
-			.ext_clk = 0,
-			.phy_bus = 0,
-			.phy_addr = STMMAC_PHY_ADDR,
-			.mdio_bus_data = &stmmac_mdio_bus,
-		});
-
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
 
 	return platform_add_devices(mb442_devices,
 			ARRAY_SIZE(mb442_devices));
diff -Nur linux-sh4-2.6.32.28_stm24_0207_orig/drivers/ata/sata_stm.c linux-sh4/drivers/ata/sata_stm.c
--- linux-sh4-2.6.32.28_stm24_0207_orig/drivers/ata/sata_stm.c	2011-10-28 00:21:08.000000000 +0200
+++ linux-sh4/drivers/ata/sata_stm.c	2011-11-03 21:54:28.000000000 +0100
@@ -871,6 +871,8 @@
 	} else if (readl(mmio + DMAC_RAWERR) & 1) {
 		ata_port_printk(ap, KERN_ERR, "DMA error asserted\n");
 	}
+	
+	else handled = 0;
 
 	return handled;
 
@@ -951,20 +953,20 @@
 	struct ata_host *host = dev_instance;
 	unsigned int handled = 0;
 	unsigned int i;
-	struct stm_host_priv *hpriv = host->private_data;
 
 DPRINTK("ENTER\n");
 
 	spin_lock(&host->lock);
 
-	for (i = 0; i < host->n_ports; i++) {
-		if (hpriv->shared_dma_host_irq)
-			handled += stm_sata_dma_irq(host->ports[i]);
-		handled += stm_sata_host_irq(host->ports[i]);
+	for (i = 0; i < host->n_ports; i++) 
+	   {
+		handled += stm_sata_dma_irq(host->ports[i]);
+		if (!(handled)) handled += stm_sata_host_irq(host->ports[i]);
+		else handled = 0;
 	}
 
 	spin_unlock(&host->lock);
-
+	
 	return IRQ_RETVAL(handled);
 }
 
@@ -1229,6 +1231,9 @@
 	hpriv->device_state = devm_stm_device_init(dev,
 		sata_private_info->device_config);
 
+	if (!hpriv->device_state)
+		return -EBUSY; 
+
 	mem_res = platform_get_resource(pdev,IORESOURCE_MEM,0);
 	phys_base = mem_res->start;
 	phys_size = mem_res->end - mem_res->start + 1;
diff -Nur linux-sh4-2.6.32.28_stm24_0207_orig/drivers/mtd/nand/Kconfig linux-sh4/drivers/mtd/nand/Kconfig
--- linux-sh4-2.6.32.28_stm24_0207_orig/drivers/mtd/nand/Kconfig	2011-09-08 14:15:42.000000000 +0200
+++ linux-sh4/drivers/mtd/nand/Kconfig	2012-04-15 12:32:08.000000000 +0100
@@ -499,4 +499,5 @@
	depends on MTD_NAND
+	depends on (CPU_SUBTYPE_STX7100)
	help
	Enables the STMicroelectronics NAND driver for platforms in which the
	device is connected via an EMI bank.
diff -Nur linux-sh4-2.6.32.28_stm24_0207_orig/drivers/mtd/nand/stm_nand_emi.c linux-sh4/drivers/mtd/nand/stm_nand_emi.c
--- linux-sh4-2.6.32.28_stm24_0207_orig/drivers/mtd/nand/stm_nand_emi.c	2011-09-08 14:15:42.000000000 +0200
+++ linux-sh4/drivers/mtd/nand/stm_nand_emi.c	2011-11-01 19:20:43.000000000 +0100
@@ -37,15 +37,14 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/nand.h>
 #include <asm/dma.h>
-
-#include "stm_nand_bbt.h"
+#include <linux/stm/pio.h>
 
 #ifdef CONFIG_MTD_PARTITIONS
 #include <linux/mtd/partitions.h>
 #endif
 
 #define NAME	"stm-nand-emi"
-
+struct stpio_pin *nand_ce_pin = NULL;
 /*
  * Private data for stm_emi_nand driver.  Concurrency and device locking
  * handled by MTD layers.
@@ -463,12 +462,24 @@
 
 	if (ctrl & NAND_CTRL_CHANGE) {
 		if (ctrl & NAND_CLE) {
-			this->IO_ADDR_W = data->io_cmd;
-		} else if (ctrl & NAND_ALE) {
-			this->IO_ADDR_W = data->io_addr;
-		} else {
-			this->IO_ADDR_W = data->io_base;
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W | (unsigned int)(1 << 17));
+		}
+		else {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W & ~(unsigned int)(1 << 17));
+		}
+
+		if (ctrl & NAND_ALE) {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W | (unsigned int)(1 << 16));
 		}
+		else {
+			this->IO_ADDR_W = (void *)((unsigned int)this->IO_ADDR_W & ~(unsigned int)(1 << 16));
+		}
+	if (ctrl & NAND_NCE) {
+		    stpio_set_pin(nand_ce_pin, 0); 
+			}
+			else {
+			stpio_set_pin(nand_ce_pin, 1); 
+		}	
 	}
 
 	if (cmd != NAND_CMD_NONE)
@@ -485,16 +496,12 @@
 }
 
 #define GET_CLK_CYCLES(X, T)	(((X) + (T) - 1) / (T))
-
-/* Configure EMI Bank according to 'stm_nand_timing_data'
- *
- * [DEPRECATED in favour of nand_config_emi() based on 'struct nand_timing_spec'
- * data.]
- */
-static void nand_config_emi_legacy(int bank, struct stm_nand_timing_data *td)
+/* Configure EMI Bank for NAND access */
+static int nand_config_emi(int bank, struct stm_nand_timing_data *td)
 {
 	struct clk *emi_clk;
 	uint32_t emi_t_ns;
+	uint32_t emi_p_ns;
 
 	unsigned long config[4];
 
@@ -511,7 +518,7 @@
 	if (!td) {
 		printk(KERN_ERR NAME "No timing data specified in platform "
 		       "data\n");
-		return;
+		return 1;
 	}
 
 	/* Timings set in terms of EMI clock... */
@@ -524,6 +531,7 @@
 	} else {
 		emi_t_ns = 1000000000UL / clk_get_rate(emi_clk);
 	}
+	emi_p_ns = emi_t_ns / 2;
 
 	/* Convert nand timings to EMI compatible values */
 	rd_cycle = GET_CLK_CYCLES(td->rd_on + td->rd_off, emi_t_ns) + 3;
@@ -554,124 +562,25 @@
 
 	config[3] = 0x00;
 
-	pr_debug("EMI Configuration Data: {0x%08x, 0x%08x, 0x%08x, 0x%08x}\n",
-		 (unsigned int)config[0], (unsigned int)config[1],
-		 (unsigned int)config[2], (unsigned int)config[3]);
-
 	/* Configure Bank */
 	emi_bank_configure(bank, config);
 
 	/* Disable PC mode */
 	emi_config_pcmode(bank, 0);
-}
-
-/* Configure EMI Bank according to 'nand_timing_spec' */
-static void nand_config_emi(int bank, struct nand_timing_spec *spec, int relax)
-{
-	struct clk *emi_clk;
-	int tCLK;
-
-	unsigned long config[4];
-
-	uint32_t rd_cycle, rd_oee1, rd_oee2, rd_latch;
-	uint32_t wr_cycle, wr_wee1, wr_wee2;
-	uint32_t bus_release;
-	uint32_t tMAX_SETUP, tMAX_HOLD;
-
-	printk(KERN_INFO NAME ": Configuring EMI Bank %d for NAND access\n",
-	       bank);
-
-	/* Get EMI clock (default 100MHz) */
-	emi_clk = clk_get(NULL, "emi_clk");
-	if (!emi_clk || IS_ERR(emi_clk)) {
-		printk(KERN_WARNING NAME
-		       ": Failed to get EMI clock, assuming default 100MHz\n");
-		tCLK = 10;
-	} else {
-		tCLK = 1000000000 / clk_get_rate(emi_clk);
-	}
 
-	rd_cycle = (spec->tRC + tCLK - 1)/tCLK + 1 + relax;
-	rd_oee1 = 0;
-	rd_oee2 = (spec->tREH + tCLK - 1)/tCLK + relax;
-	rd_latch = (spec->tREH + tCLK - 1)/tCLK + relax;
-
-	bus_release = (spec->tCHZ + tCLK - 1)/tCLK + relax;
-
-	tMAX_SETUP = spec->tCLS;
-	if (spec->tCS > tMAX_SETUP)
-		tMAX_SETUP = spec->tCS;
-	if (spec->tALS > tMAX_SETUP)
-		tMAX_SETUP = spec->tALS;
-	if (spec->tDS > tMAX_SETUP)
-		tMAX_SETUP = spec->tDS;
-	if (spec->tWP > tMAX_SETUP)
-		tMAX_SETUP = spec->tWP;
-
-	tMAX_HOLD = spec->tCLH;
-	if (spec->tCH > tMAX_HOLD)
-		tMAX_HOLD = spec->tCH;
-	if (spec->tALH > tMAX_HOLD)
-		tMAX_HOLD = spec->tALH;
-	if (spec->tDH > tMAX_HOLD)
-		tMAX_HOLD = spec->tDH;
-	if (spec->tWH > tMAX_HOLD)
-		tMAX_HOLD = spec->tWH;
-
-	if (spec->tWC > (tMAX_SETUP + tMAX_HOLD))
-		wr_cycle = (spec->tWC + tCLK - 1)/tCLK + 1 + relax;
-	else
-		wr_cycle = (tMAX_SETUP + tMAX_HOLD + tCLK - 1)/tCLK + 1 + relax;
-	wr_wee1 = 0;
-	wr_wee2 = (tMAX_HOLD + tCLK - 1)/tCLK + relax;
-
-	config[0] = (EMI_CFG0_WE_USE_OE_CFG |
-		     EMI_CFG0_LATCH_POINT(rd_latch) |
-		     EMI_CFG0_BUS_RELEASE(bus_release) |
-		     EMI_CFG0_CS_ACTIVE(ACTIVE_CODE_RDWR) |
-		     EMI_CFG0_OE_ACTIVE(ACTIVE_CODE_RD) |
-		     EMI_CFG0_BE_ACTIVE(ACTIVE_CODE_OFF) |
-		     EMI_CFG0_PORTSIZE_8BIT |
-		     EMI_CFG0_DEVICE_NORMAL);
-
-	config[1] = (EMI_CFG1_READ_CYCLESNOTPHASE |
-		     EMI_CFG1_READ_CYCLES(rd_cycle) |
-		     EMI_CFG1_READ_OEE1(rd_oee1) |
-		     EMI_CFG1_READ_OEE2(rd_oee2));
-
-	config[2] = (EMI_CFG2_WRITE_CYCLESNOTPHASE |
-		     EMI_CFG2_WRITE_CYCLES(wr_cycle) |
-		     EMI_CFG2_WRITE_OEE1(wr_wee1) |
-		     EMI_CFG2_WRITE_OEE2(wr_wee2));
-
-	config[3] = 0;
-
-	pr_debug("EMI Configuration Data: {0x%08x, 0x%08x, 0x%08x, 0x%08x}\n",
-		 (unsigned int)config[0], (unsigned int)config[1],
-		 (unsigned int)config[2], (unsigned int)config[3]);
-
-	/* Configure Bank */
-	emi_bank_configure(bank, config);
-
-	/* Disable PC mode */
-	emi_config_pcmode(bank, 0);
+	return 0;
 }
 
 /*
  * Probe for the NAND device.
  */
-static struct stm_nand_emi * __devinit nand_probe_bank(
+static struct stm_nand_emi * __init nand_probe_bank(
 	struct stm_nand_bank_data *bank, int rbn_gpio,
-	struct platform_device *pdev)
+	const char* name)
 {
 	struct stm_nand_emi *data;
+	struct stm_nand_timing_data *tm;
 
-	/* Default EMI config data, for device probing */
-	unsigned long emi_cfg_probe[] = {
-		0x04402e99,
-		0x0a000400,
-		0x0a000400,
-		0x00000000};
 	int res = 0;
 
 	/* Allocate memory for the driver structure (and zero it) */
@@ -688,12 +597,15 @@
 		bank->emi_withinbankoffset;
 	data->emi_size = (1 << 18) + 1;
 
-	/* Configure EMI Bank for device probe */
-	emi_bank_configure(data->emi_bank, emi_cfg_probe);
-	emi_config_pcmode(data->emi_bank, 0);
+	/* Configure EMI Bank */
+	if (nand_config_emi(data->emi_bank, bank->timing_data) != 0) {
+		printk(KERN_ERR NAME ": Failed to configure EMI bank "
+		       "for NAND device\n");
+		goto out1;
+	}
 
 	/* Request IO Memory */
-	if (!request_mem_region(data->emi_base, data->emi_size, NAME)) {
+	if (!request_mem_region(data->emi_base, data->emi_size, name)) {
 		printk(KERN_ERR NAME ": Request mem 0x%x region failed\n",
 		       data->emi_base);
 		res = -ENODEV;
@@ -730,10 +642,10 @@
 		goto out4;
 	}
 
-	data->io_addr = ioremap_nocache(data->emi_base | (1 << 18), 1);
+	data->io_addr = ioremap_nocache(data->emi_base | (1 << 16), 1);
 	if (!data->io_addr) {
 		printk(KERN_ERR NAME ": ioremap failed for io_addr 0x%08x\n",
-		       data->emi_base | (1 << 18));
+		       data->emi_base | (1 << 16));
 		res = -ENOMEM;
 		goto out5;
 	}
@@ -741,21 +653,25 @@
 	data->chip.priv = data;
 	data->mtd.priv = &data->chip;
 	data->mtd.owner = THIS_MODULE;
-	data->mtd.dev.parent = &pdev->dev;
 
 	/* Assign more sensible name (default is string from nand_ids.c!) */
-	data->mtd.name = dev_name(&pdev->dev);
+	data->mtd.name = name;
+
+	tm = bank->timing_data;
 
-	data->chip.IO_ADDR_R = data->io_base;
-	data->chip.IO_ADDR_W = data->io_base;
-	data->rbn_gpio = -1;
-	data->chip.chip_delay = 50;
+	data->chip.IO_ADDR_R = 0xA0400000;
+	data->chip.IO_ADDR_W = 0xA0800000;
+	data->chip.chip_delay = tm->chip_delay;
 	data->chip.cmd_ctrl = nand_cmd_ctrl_emi;
 
 	/* Do we have access to NAND_RBn? */
 	if (gpio_is_valid(rbn_gpio)) {
 		data->rbn_gpio = rbn_gpio;
 		data->chip.dev_ready = nand_device_ready;
+	} else {
+		data->rbn_gpio = -1;
+		if (data->chip.chip_delay == 0)
+			data->chip.chip_delay = 30;
 	}
 
 	/* Set IO routines for acessing NAND pages */
@@ -786,61 +702,13 @@
 	/* Copy chip options from platform data */
 	data->chip.options = bank->options;
 
-	data->chip.scan_bbt = stmnand_scan_bbt;
-
-	/* Scan to find existence of device */
-	if (nand_scan_ident(&data->mtd, 1) != 0) {
+	/* Scan to find existance of the device */
+	if (nand_scan(&data->mtd, 1)) {
 		printk(KERN_ERR NAME ": nand_scan failed\n");
-		res = -ENODEV;
-		goto out6;
-	}
-
-	/*
-	 * Configure timing registers
-	 */
-	if (bank->timing_spec) {
-		printk(KERN_INFO NAME ": Using platform timing data\n");
-		nand_config_emi(data->emi_bank, bank->timing_spec,
-				bank->timing_relax);
-		data->chip.chip_delay = bank->timing_spec->tR;
-	} else if (bank->timing_data) {
-		printk(KERN_INFO NAME ": Using legacy platform timing data\n");
-		nand_config_emi_legacy(data->emi_bank, bank->timing_data);
-		data->chip.chip_delay = bank->timing_data->chip_delay;
-	} else if (data->chip.onfi_version) {
-		struct nand_onfi_params *onfi = &data->chip.onfi_params;
-		int mode;
-
-		mode = fls(le16_to_cpu(onfi->async_timing_mode)) - 1;
-		/* Modes 4 and 5 (EDO) are not supported on our H/W */
-		if (mode > 3)
-			mode = 3;
-
-		printk(KERN_INFO NAME ": Using ONFI Timing Mode %d\n", mode);
-		nand_config_emi(data->emi_bank, &nand_onfi_timing_specs[mode],
-				bank->timing_relax);
-		data->chip.chip_delay = le16_to_cpu(data->chip.onfi_params.t_r);
-	} else {
-		printk(KERN_WARNING NAME ": No timing data available\n");
-	}
-
-	/* Complete scan */
-	if (nand_scan_tail(&data->mtd) != 0) {
 		res = -ENXIO;
 		goto out6;
 	}
 
-	/* If all blocks are marked bad, mount as "recovery" partition */
-	if (stmnand_blocks_all_bad(&data->mtd)) {
-		printk(KERN_ERR NAME ": initiating NAND Recovery Mode\n");
-		data->mtd.name = "NAND RECOVERY MODE";
-		res = add_mtd_device(&data->mtd);
-		if (res)
-			goto out6;
-
-		return data;
-	}
-
 #ifdef CONFIG_MTD_PARTITIONS
 	res = parse_mtd_partitions(&data->mtd, part_probes, &data->parts, 0);
 	if (res > 0) {
@@ -877,47 +745,25 @@
 	return ERR_PTR(res);
 }
 
-static void nand_remove_bank(struct stm_nand_emi *emi,
-			     struct stm_nand_bank_data *data)
-{
-	nand_release(&emi->mtd);
-
-#ifdef CONFIG_MTD_PARTITIONS
-	if (emi->parts && emi->parts != data->partitions)
-		kfree(emi->parts);
-#endif
-	iounmap(emi->io_addr);
-	iounmap(emi->io_cmd);
-#ifdef CONFIG_STM_NAND_EMI_CACHED
-	iounmap(emi->io_data);
-#endif
-	iounmap(emi->io_base);
-	release_mem_region(emi->emi_base, emi->emi_size);
-#ifdef CONFIG_STM_NAND_EMI_FDMA
-	exit_fdma_nand(emi);
-#endif
-	kfree(emi);
-}
-
-static int __devinit stm_nand_emi_probe(struct platform_device *pdev)
+static int __init stm_nand_emi_probe(struct platform_device *pdev)
 {
 	struct stm_plat_nand_emi_data *pdata = pdev->dev.platform_data;
-	struct stm_nand_emi_group *group;
-	struct stm_nand_emi *emi;
-	int err;
+	int res;
 	int n;
 	int rbn_gpio;
+	struct stm_nand_emi_group *group;
+	struct stm_nand_bank_data *bank;
 
 	group = kzalloc(sizeof(struct stm_nand_emi_group) +
 			(sizeof(struct stm_nand_emi *) * pdata->nr_banks),
 			GFP_KERNEL);
 	if (!group)
 		return -ENOMEM;
-
+	nand_ce_pin = stpio_request_set_pin(3, 6, "nand_sel", STPIO_OUT, 0);
 	rbn_gpio = pdata->emi_rbn_gpio;
 	if (gpio_is_valid(rbn_gpio)) {
-		err = gpio_request(rbn_gpio, "nand_RBn");
-		if (err == 0) {
+		res = gpio_request(rbn_gpio, "nand_RBn");
+		if (res == 0) {
 			gpio_direction_input(rbn_gpio);
 		} else {
 			dev_err(&pdev->dev, "nand_rbn unavailable. "
@@ -929,32 +775,16 @@
 	group->rbn_gpio = rbn_gpio;
 	group->nr_banks = pdata->nr_banks;
 
-	for (n = 0; n < pdata->nr_banks; n++) {
-		emi = nand_probe_bank(&pdata->banks[n], rbn_gpio, pdev);
-
-		if (IS_ERR(emi)) {
-			err = PTR_ERR(emi);
-			goto err1;
-		}
-
-		group->banks[n] = emi;
+	bank = pdata->banks;
+	for (n=0; n<pdata->nr_banks; n++) {
+		group->banks[n] = nand_probe_bank(bank, rbn_gpio,
+						  dev_name(&pdev->dev));
+		bank++;
 	}
 
 	platform_set_drvdata(pdev, group);
 
 	return 0;
-
- err1:
-	while (--n > 0)
-		nand_remove_bank(group->banks[n], &pdata->banks[n]);
-
-	if (gpio_is_valid(group->rbn_gpio))
-		gpio_free(group->rbn_gpio);
-
-	platform_set_drvdata(pdev, NULL);
-	kfree(group);
-
-	return err;
 }
 
 /*
@@ -963,11 +793,33 @@
 static int __devexit stm_nand_emi_remove(struct platform_device *pdev)
 {
 	struct stm_nand_emi_group *group = platform_get_drvdata(pdev);
+#ifdef CONFIG_MTD_PARTITIONS
 	struct stm_plat_nand_emi_data *pdata = pdev->dev.platform_data;
+#endif
 	int n;
 
-	for (n = 0; n < group->nr_banks; n++)
-		nand_remove_bank(group->banks[n], &pdata->banks[n]);
+	for (n=0; n<group->nr_banks; n++) {
+		struct stm_nand_emi *data = group->banks[n];
+
+		nand_release(&data->mtd);
+
+#ifdef CONFIG_MTD_PARTITIONS
+		if (data->parts && data->parts != pdata->banks[n].partitions)
+			kfree(data->parts);
+#endif
+
+		iounmap(data->io_addr);
+		iounmap(data->io_cmd);
+#ifdef CONFIG_STM_NAND_EMI_CACHED
+		iounmap(data->io_data);
+#endif
+		iounmap(data->io_base);
+		release_mem_region(data->emi_base, data->emi_size);
+#ifdef CONFIG_STM_NAND_EMI_FDMA
+		exit_fdma_nand(data);
+#endif
+		kfree(data);
+	}
 
 	if (gpio_is_valid(group->rbn_gpio))
 		gpio_free(group->rbn_gpio);
diff -Nur linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/smc91x.c linux-sh4/drivers/net/smc91x.c
--- linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/smc91x.c	2011-09-20 19:49:00.000000000 +0200
+++ linux-sh4/drivers/net/smc91x.c	2011-10-09 11:51:23.000000000 +0200
@@ -234,7 +234,6 @@
 	}								\
 } while (0)
 
-
 /*
  * this does a soft reset on the device
  */
@@ -269,6 +268,10 @@
 	SMC_SELECT_BANK(lp, 0);
 	SMC_SET_RCR(lp, RCR_SOFTRST);
 
+    	msleep(100); // d-mon
+    	SMC_SET_RCR(lp, RCR_CLEAR);
+    	msleep(60);
+
 	/*
 	 * Setup the Configuration Register
 	 * This is necessary because the CONFIG_REG is not affected
@@ -309,6 +312,8 @@
 	SMC_SET_RCR(lp, RCR_CLEAR);
 	SMC_SET_TCR(lp, TCR_CLEAR);
 
+    	udelay(5); // d-mon
+
 	SMC_SELECT_BANK(lp, 1);
 	ctl = SMC_GET_CTL(lp) | CTL_LE_ENABLE;
 
@@ -325,6 +330,8 @@
 
 	/* Reset the MMU */
 	SMC_SELECT_BANK(lp, 2);
+	udelay(5); // d-mon
+
 	SMC_SET_MMU_CMD(lp, MC_RESET);
 	SMC_WAIT_MMU_BUSY(lp);
 }
@@ -349,7 +356,9 @@
 	SMC_SET_MAC_ADDR(lp, dev->dev_addr);
 
 	/* now, enable interrupts */
-	mask = IM_EPH_INT|IM_RX_OVRN_INT|IM_RCV_INT;
+	//mask = IM_EPH_INT|IM_RX_OVRN_INT|IM_RCV_INT;
+	mask = IM_ERCV_INT|IM_ALLOC_INT|IM_RCV_INT | IM_MDINT; // d-mon
+
 	if (lp->version >= (CHIP_91100 << 4))
 		mask |= IM_MDINT;
 	SMC_SELECT_BANK(lp, 2);
@@ -1117,10 +1126,14 @@
 	 * Enable PHY Interrupts (for register 18)
 	 * Interrupts listed here are disabled
 	 */
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
+
 	smc_phy_write(dev, phyaddr, PHY_MASK_REG,
 		PHY_INT_LOSSSYNC | PHY_INT_CWRD | PHY_INT_SSD |
 		PHY_INT_ESD | PHY_INT_RPOL | PHY_INT_JAB |
 		PHY_INT_SPDDET | PHY_INT_DPLXDET);
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
+	smc_phy_read(dev, phyaddr, PHY_INT_REG); // d-mon
 
 	/* Configure the Receive/Phy Control register */
 	SMC_SELECT_BANK(lp, 0);
@@ -2354,7 +2367,11 @@
 		ret = -ENOMEM;
 		goto out_release_attrib;
 	}
-
+	
+	
+	platform_set_drvdata(pdev, ndev);
+	//ret = smc_probe(ndev, addr);
+	
 #ifdef CONFIG_ARCH_PXA
 	{
 		struct smc_local *lp = netdev_priv(ndev);
diff -Nur linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/smc91x.h linux-sh4/drivers/net/smc91x.h
--- linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/smc91x.h	2011-09-20 19:48:58.000000000 +0200
+++ linux-sh4/drivers/net/smc91x.h	2011-10-03 16:24:15.000000000 +0200
@@ -250,16 +250,19 @@
  * to do a SMC_outl, which on a 16 bit bus translates into two 16 bit writes.
  * This bypasses the special logic which would prevent this also updating
  * this interrupt mask register. */
-#define SMC_CAN_USE_8BIT	1
+#define SMC_CAN_USE_8BIT	0
 #define SMC_CAN_USE_16BIT	1
 #define SMC_CAN_USE_32BIT	0
 #define SMC_CAN_USE_32BIT_DATA	1
-#define SMC_IO_SHIFT		0
+#define SMC_IO_SHIFT		14
+    
+    #undef  SMC_USE_PXA_DMA
+     
 #else
 #error Unknown board
 #endif
 
-#define SMC_NOWAIT		0
+#define SMC_NOWAIT		1
 #define SMC_IRQ_FLAGS		0
 
 #ifdef SMC_STEM_BS_MASK
diff -Nur linux-sh4-2.6.32.28_stm24_0207_orig/drivers/stm/stx7100_comms.c linux-sh4/drivers/stm/stx7100_comms.c
--- linux-sh4-2.6.32.28_stm24_0207_orig/drivers/stm/stx7100_comms.c	2011-09-08 14:15:42.000000000 +0200
+++ linux-sh4/drivers/stm/stx7100_comms.c	2011-09-09 13:14:14.000000000 +0200
@@ -226,12 +226,12 @@
 			STM_PAD_PIO_BIDIR_NAMED(2, 0, 1, "SCL"),
 			STM_PAD_PIO_BIDIR_NAMED(2, 1, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC0_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 1, 1, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+		//	/* DVO_OUT_ON = 0 (SSC not DVO) */
+		//	STM_PAD_SYS_CFG(7, 10, 10, 0),
 		},
 	},
 	[1] = {
@@ -344,7 +344,7 @@
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
diff -Nur linux-sh4-2.6.32.28_stm24_0207_orig/include/linux/libata.h linux-sh4/include/linux/libata.h
--- linux-sh4-2.6.32.28_stm24_0207_orig/include/linux/libata.h	2011-10-28 00:21:08.000000000 +0200
+++ linux-sh4/include/linux/libata.h	2011-10-30 18:22:18.000000000 +0100
@@ -52,6 +52,7 @@
  * compile-time options: to be removed as soon as all the drivers are
  * converted to the new debugging mechanism
  */
+//#define ATA_DEBUG
 #undef ATA_DEBUG		/* debugging output */
 #undef ATA_VERBOSE_DEBUG	/* yet more debugging output */
 #undef ATA_IRQ_TRAP		/* define to ack screaming irqs */
@@ -938,6 +939,18 @@
 #undef writew
 #define writew(v_,a_)	sata_writew(ap, v_, a_)
 
+/* overwrite the original definition from io.h */
+#undef __raw_readb
+#define __raw_readb(a_)		readb(a_)
+#undef __raw_writeb
+#define __raw_writeb(v_,a_)	writeb(v_,a_)
+#undef __raw_readw
+#define __raw_readw(a_)		readw(a_)
+#undef __raw_writew
+#define __raw_writew(v_,a_)	writew(v_,a_)
+
+
+
 struct ata_port_info {
 	unsigned long		flags;
 	unsigned long		link_flags;
