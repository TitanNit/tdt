diff -Nur '--exclude=.git' '--exclude=tuxtxt' enigma2-nightly.org/configure.ac enigma2-nightly.patched/configure.ac
--- enigma2-nightly.org/configure.ac	2011-09-03 18:23:23.590021783 +0200
+++ enigma2-nightly.patched/configure.ac	2011-09-03 18:23:47.060032502 +0200
@@ -30,7 +30,7 @@
 AM_CONDITIONAL(HAVE_GIT_DIR, test -d "$srcdir/.git")
 AM_CONDITIONAL(HAVE_FAKE_GIT_DIR, test -f "$srcdir/.git/last_commit_info")
 
-PKG_CHECK_MODULES(BASE, [freetype2 fribidi gstreamer-0.10 gstreamer-pbutils-0.10 libdvbsi++ libpng libxml-2.0 sigc++-1.2])
+PKG_CHECK_MODULES(BASE, [freetype2 fribidi libdvbsi++ libpng libxml-2.0 sigc++-1.2])
 PKG_CHECK_MODULES(LIBDDVD, libdreamdvd, HAVE_LIBDDVD="yes", HAVE_LIBDDVD="no")
 AM_CONDITIONAL(HAVE_LIBDDVD, test "$HAVE_LIBDDVD" = "yes")
 
diff -Nur '--exclude=.git' '--exclude=tuxtxt' enigma2-nightly.org/main/enigma.cpp enigma2-nightly.patched/main/enigma.cpp
--- enigma2-nightly.org/main/enigma.cpp	2011-09-03 18:23:28.060023358 +0200
+++ enigma2-nightly.patched/main/enigma.cpp	2011-09-03 18:23:47.560033163 +0200
@@ -30,7 +30,9 @@
 #include "bsod.h"
 #include "version_info.h"
 
+#if not defined(__sh__)
 #include <gst/gst.h>
+#endif
 
 #ifdef OBJECT_DEBUG
 int object_total_remaining;
@@ -132,7 +147,9 @@
 	atexit(object_dump);
 #endif
 
+#if not defined(__sh__)
 	gst_init(&argc, &argv);
+#endif
 
 	// set pythonpath if unset
 	setenv("PYTHONPATH", eEnv::resolve("${libdir}/enigma2/python").c_str(), 0);
diff -Nur '--exclude=.git' '--exclude=tuxtxt' enigma2-nightly.org/main/Makefile.am enigma2-nightly.patched/main/Makefile.am
--- enigma2-nightly.org/main/Makefile.am	2011-09-03 18:23:28.030023423 +0200
+++ enigma2-nightly.patched/main/Makefile.am	2011-09-03 18:23:47.570032972 +0200
@@ -51,7 +51,7@@
 	@LIBXMLCCWRAP_LIBS@ \
 	@PTHREAD_LIBS@ \
	@PYTHON_LDFLAGS@ \
-	-ldl -lpthread -lcrypt -lresolv -lrt -lmmeimage
+	-ldl -lpthread -lcrypt -lresolv -lrt -lmmeimage -leplayer3
 
 enigma2_LDFLAGS = -Wl,--export-dynamic
 
diff -Nur '--exclude=.git' '--exclude=tuxtxt' enigma2-nightly.org/lib/service/servicemp3.cpp enigma2-nightly.patched/lib/service/servicemp3.cpp
--- enigma2-nightly.org/lib/service/servicemp3.cpp	2012-03-29 00:55:33.000000000 +0200
+++ enigma2-nightly.patched/lib/service/servicemp3.cpp	2012-03-29 00:55:20.000000000 +0200
@@ -15,8 +15,10 @@
 
 #include <string>
 
+#if not defined(__sh__)
 #include <gst/gst.h>
 #include <gst/pbutils/missing-plugins.h>
+#endif
 #include <sys/stat.h>
 
 #define HTTP_TIMEOUT 10
@@ -47,6 +49,26 @@
 		extensions.push_back("mp4");
 		extensions.push_back("mov");
 		extensions.push_back("m4a");
+#if defined(__sh__)
+		extensions.push_back("mpeg");
+		extensions.push_back("m2ts");
+		extensions.push_back("trp");
+		extensions.push_back("vdr");
+		extensions.push_back("wma");
+		extensions.push_back("mts");
+		extensions.push_back("flv");
+		extensions.push_back("rar");
+		extensions.push_back("img");
+		extensions.push_back("iso");
+		extensions.push_back("ifo");
+		int fd = open("/proc/stb/info/model", O_RDONLY);
+		char tmp[255];
+		int rd = fd >= 0 ? read(fd, tmp, 255) : 0;
+		if (fd >= 0)
+			close(fd);
+		if (!strncmp(tmp, "ufs912\n", rd) || !strncmp(tmp, "atevio7500\n", rd) || !strncmp(tmp, "hs7110\n", rd) || !strncmp(tmp, "whitebox\n", rd))
+			extensions.push_back("wmv");
+#endif
 		sc->addServiceFactory(eServiceFactoryMP3::id, this, extensions);
 	}
 
@@ -219,7 +241,9 @@
 	m_seekTimeout = eTimer::create(eApp);
 	m_subtitle_sync_timer = eTimer::create(eApp);
 	m_streamingsrc_timeout = 0;
+#if not defined(__sh__)
 	m_stream_tags = 0;
+#endif
 	m_currentAudioStream = -1;
 	m_currentSubtitleStream = 0;
 	m_subtitle_widget = 0;
@@ -232,7 +256,9 @@
 
 	CONNECT(m_seekTimeout->timeout, eServiceMP3::seekTimeoutCB);
 	CONNECT(m_subtitle_sync_timer->timeout, eServiceMP3::pushSubtitles);
+#if not defined(__sh__)
 	CONNECT(m_pump.recv_msg, eServiceMP3::gstPoll);
+#endif
 	m_aspect = m_width = m_height = m_framerate = m_progressive = -1;
 
 	m_state = stIdle;
@@ -243,6 +269,7 @@
 	if (!ext)
 		ext = filename;
 
+#if not defined(__sh__)
 	m_sourceinfo.is_video = FALSE;
 	m_sourceinfo.audiotype = atUnknown;
 	if ( (strcasecmp(ext, ".mpeg") && strcasecmp(ext, ".mpg") && strcasecmp(ext, ".vob") && strcasecmp(ext, ".bin") && strcasecmp(ext, ".dat") ) == 0 )
@@ -377,10 +404,180 @@
 	}
 
 	setBufferSize(m_buffer_size);
+#else
+    player = (Context_t*) malloc(sizeof(Context_t));
+
+    if(player) {
+	    player->playback	= &PlaybackHandler;
+	    player->output		= &OutputHandler;
+	    player->container	= &ContainerHandler;
+	    player->manager		= &ManagerHandler;
+
+    	printf("%s\n", player->output->Name);
+    }
+
+	//Registration of output devices
+    if(player && player->output) {
+	    player->output->Command(player,OUTPUT_ADD, (void*)"audio");
+	    player->output->Command(player,OUTPUT_ADD, (void*)"video");
+	    player->output->Command(player,OUTPUT_ADD, (void*)"subtitle");
+    }
+    if(player && player->output && player->output->subtitle) {
+    	fbClass *fb = fbClass::getInstance();
+        SubtitleOutputDef_t out;
+        
+        out.screen_width = fb->getScreenResX();
+        out.screen_height = fb->getScreenResY();
+        out.shareFramebuffer = 1;
+        out.framebufferFD = fb->getFD();
+        out.destination = fb->getLFB_Direct();
+        out.destStride = fb->Stride();
+
+        player->output->subtitle->Command(player, (OutputCmd_t)OUTPUT_SET_SUBTITLE_OUTPUT, (void*) &out);
+    }
+
+    //create playback path
+    char file[400] = {""};
+
+    if(!strncmp("http://", m_ref.path.c_str(), 7))
+        ;
+    else if(!strncmp("rtsp://", m_ref.path.c_str(), 7))
+        ;
+    else if(!strncmp("rtmp://", m_ref.path.c_str(), 7))
+        ;
+    else if(!strncmp("rtmpe://", m_ref.path.c_str(), 8))
+        ;
+    else if(!strncmp("rtmpt://", m_ref.path.c_str(), 8))
+        ;
+    else if(!strncmp("rtmps://", m_ref.path.c_str(), 8))
+        ;
+    else if(!strncmp("rtmpte://", m_ref.path.c_str(), 9))
+        ;
+    else if(!strncmp("rtp://", m_ref.path.c_str(), 6))
+        ;
+    else if(!strncmp("upnp://", m_ref.path.c_str(), 7))
+        ;
+    else if(!strncmp("mms://", m_ref.path.c_str(), 6))
+        ;
+    else if(!strncmp("file://", m_ref.path.c_str(), 7))
+        ;
+    else
+        strcat(file, "file://");
+
+    strcat(file, m_ref.path.c_str());
+
+    //try to open file
+	if(player && player->playback && player->playback->Command(player, PLAYBACK_OPEN, file) >= 0) {
+
+        //VIDEO
+            //We dont have to register video tracks, or do we ?
+
+        //AUDIO
+        if(player && player->manager && player->manager->audio) {
+            char ** TrackList = NULL;
+		    player->manager->audio->Command(player, MANAGER_LIST, &TrackList);
+		    if (TrackList != NULL) {
+			    printf("AudioTrack List\n");
+			    int i = 0;
+			    for (i = 0; TrackList[i] != NULL; i+=2) {
+				    printf("\t%s - %s\n", TrackList[i], TrackList[i+1]);
+                    audioStream audio;
+
+                    audio.language_code = TrackList[i];
+
+                    // atUnknown, atMPEG, atMP3, atAC3, atDTS, atAAC, atPCM, atOGG, atFLAC
+                    if(     !strncmp("A_MPEG/L3",   TrackList[i+1], 9))
+                        audio.type = atMP3;
+                    else if(!strncmp("A_MP3",       TrackList[i+1], 5))
+                        audio.type = atMP3;
+                    else if(!strncmp("A_AC3",       TrackList[i+1], 5))
+                        audio.type = atAC3;
+                    else if(!strncmp("A_DTS",       TrackList[i+1], 5))
+                        audio.type = atDTS;
+                    else if(!strncmp("A_AAC",       TrackList[i+1], 5))
+                        audio.type = atAAC;
+                    else if(!strncmp("A_PCM",       TrackList[i+1], 5))
+                        audio.type = atPCM;
+                    else if(!strncmp("A_VORBIS",    TrackList[i+1], 8))
+                        audio.type = atOGG;
+                    else if(!strncmp("A_FLAC",      TrackList[i+1], 6))
+                        audio.type = atFLAC;
+                    else
+		                audio.type = atUnknown;
+
+		            m_audioStreams.push_back(audio);
+
+				    free(TrackList[i]);
+                    free(TrackList[i+1]);
+			    }
+			    free(TrackList);
+		    }
+        }
+
+        //SUB
+        if(player && player->manager && player->manager->subtitle) {
+            char ** TrackList = NULL;
+		    player->manager->subtitle->Command(player, MANAGER_LIST, &TrackList);
+		    if (TrackList != NULL) {
+			    printf("SubtitleTrack List\n");
+			    int i = 0;
+			    for (i = 0; TrackList[i] != NULL; i+=2) {
+				    printf("\t%s - %s\n", TrackList[i], TrackList[i+1]);
+                    subtitleStream sub;
+
+                    sub.language_code = TrackList[i];
+
+                    //  stPlainText, stSSA, stSRT
+                    if(     !strncmp("S_TEXT/SSA",  TrackList[i+1], 10) ||
+                            !strncmp("S_SSA",       TrackList[i+1], 5))
+                        sub.type = stSSA;
+                    else if(!strncmp("S_TEXT/ASS",  TrackList[i+1], 10) ||
+                            !strncmp("S_AAS",       TrackList[i+1], 5))
+                        sub.type = stSSA;
+                    else if(!strncmp("S_TEXT/SRT",  TrackList[i+1], 10) ||
+                            !strncmp("S_SRT",       TrackList[i+1], 5))
+                        sub.type = stSRT;
+                    else
+		                sub.type = stPlainText;
+
+		            m_subtitleStreams.push_back(sub);
+
+				    free(TrackList[i]);
+                    free(TrackList[i+1]);
+			    }
+			    free(TrackList);
+		    }
+        }
+
+		m_event(this, evStart);
+    } else {
+        //Creation failed, no playback support for insert file, so delete playback context
+
+        //FIXME: How to tell e2 that we failed?
+
+        if(player && player->output) {
+            player->output->Command(player,OUTPUT_DEL, (void*)"audio");
+	        player->output->Command(player,OUTPUT_DEL, (void*)"video");
+	        player->output->Command(player,OUTPUT_DEL, (void*)"subtitle");
+        }
+
+        if(player && player->playback)
+            player->playback->Command(player,PLAYBACK_CLOSE, NULL);
+
+        if(player)
+            free(player);
+        player = NULL;
+
+    }
+
+	//m_state = stRunning;
+	eDebug("eServiceMP3-<\n");
+#endif
 }
 
 eServiceMP3::~eServiceMP3()
 {
+#if not defined(__sh__)
 	// disconnect subtitle callback
 	GstElement *appsink = gst_bin_get_by_name(GST_BIN(m_gst_playbin), "subtitle_sink");
 
@@ -390,14 +587,17 @@
 		gst_object_unref(appsink);
 	}
 
+#endif
 	delete m_subtitle_widget;
-
+#if not defined(__sh__)
 	// disconnect sync handler callback
 	gst_bus_set_sync_handler(gst_pipeline_get_bus (GST_PIPELINE (m_gst_playbin)), NULL, NULL);
 
+#endif
 	if (m_state == stRunning)
 		stop();
 
+#if not defined(__sh__)
 	if (m_stream_tags)
 		gst_tag_list_free(m_stream_tags);
 	
@@ -406,6 +606,22 @@
 		gst_object_unref (GST_OBJECT (m_gst_playbin));
 		eDebug("eServiceMP3::destruct!");
 	}
+#else
+//Trick
+/*    if(player && player->output) {
+        player->output->Command(player,OUTPUT_DEL, (void*)"audio");
+        player->output->Command(player,OUTPUT_DEL, (void*)"video");
+        player->output->Command(player,OUTPUT_DEL, (void*)"subtitle");
+    }
+
+    if(player && player->playback)
+        player->playback->Command(player,PLAYBACK_CLOSE, NULL);
+
+    if(player)
+        free(player);
+    player = NULL;
+*/
+#endif
 }
 
 DEFINE_REF(eServiceMP3);
@@ -413,20 +629,35 @@
 RESULT eServiceMP3::connectEvent(const Slot2<void,iPlayableService*,int> &event, ePtr<eConnection> &connection)
 {
 	connection = new eConnection((iPlayableService*)this, m_event.connect(event));
+#if defined(__sh__)
+	m_event(this, evSeekableStatusChanged);
+#endif
 	return 0;
 }
 
 RESULT eServiceMP3::start()
 {
+#if not defined(__sh__)
 	ASSERT(m_state == stIdle);
-
+#else
+	if(m_state != stIdle) {
+		eDebug("eServiceMP3::%s < m_state != stIdle", __func__);
+		return -1;
+	}
+#endif
 	m_state = stRunning;
+#if not defined(__sh__)
 	if (m_gst_playbin)
 	{
 		eDebug("eServiceMP3::starting pipeline");
 		gst_element_set_state (m_gst_playbin, GST_STATE_PLAYING);
 	}
-
+#else
+	if(player && player->output && player->playback) {
+        player->output->Command(player, OUTPUT_OPEN, NULL);
+        player->playback->Command(player, PLAYBACK_PLAY, NULL);
+    }
+#endif
 	m_event(this, evStart);
 
 	return 0;
@@ -440,15 +671,42 @@
 
 RESULT eServiceMP3::stop()
 {
+#if not defined(__sh__)
 	ASSERT(m_state != stIdle);
-
+#else
+	if(m_state == stIdle) {
+		eDebug("eServiceMP3::%s < m_state == stIdle", __func__);
+		return -1;
+	}
+#endif
 	if (m_state == stStopped)
 		return -1;
 	
 	//GST_DEBUG_BIN_TO_DOT_FILE(GST_BIN(m_gst_playbin),GST_DEBUG_GRAPH_SHOW_ALL,"e2-playbin");
 
 	eDebug("eServiceMP3::stop %s", m_ref.path.c_str());
+#if not defined(__sh__)
 	gst_element_set_state(m_gst_playbin, GST_STATE_NULL);
+#else
+	if(player && player->playback && player->output) {
+        player->playback->Command(player, PLAYBACK_STOP, NULL);
+        player->output->Command(player, OUTPUT_CLOSE, NULL);
+    }
+	//Trick
+	if(player && player->output) {
+		player->output->Command(player,OUTPUT_DEL, (void*)"audio");
+		player->output->Command(player,OUTPUT_DEL, (void*)"video");
+		player->output->Command(player,OUTPUT_DEL, (void*)"subtitle");
+	}
+
+
+	if(player && player->playback)
+		player->playback->Command(player,PLAYBACK_CLOSE, NULL);
+	if(player)
+		free(player);
+	if(player != NULL)
+		player = NULL;
+#endif
 	m_state = stStopped;
 
 	return 0;
@@ -462,21 +720,96 @@
 RESULT eServiceMP3::pause(ePtr<iPauseableService> &ptr)
 {
 	ptr=this;
+#if defined(__sh__)
+	m_event((iPlayableService*)this, evSeekableStatusChanged);
+	m_event((iPlayableService*)this, evUpdatedInfo);
+#endif
 	return 0;
 }
 
+#ifdef __sh__
+int speed_mapping[] =
+{
+ /* e2_ratio   speed */
+    2,         1,
+    4,         3,
+    8,         7,
+   16,        15,
+   32,        31,
+   64,        63, 
+   128,      127,
+    -2,       -5,
+    -4,      -10,
+    -8,      -20,
+   -16,      -40,
+   -32,      -80,
+   -64,     -160,
+  -128,     -320,
+    -1,       -1
+};
+
+int getSpeed(int ratio)
+{
+   int i = 0;
+   
+   while (speed_mapping[i] != -1)
+   {
+       if (speed_mapping[i] == ratio)
+          return speed_mapping[i+1];
+       i += 2;
+   }
+   return -1;
+}
+#endif
+
 RESULT eServiceMP3::setSlowMotion(int ratio)
 {
+#if not defined(__sh__)
 	if (!ratio)
 		return 0;
 	eDebug("eServiceMP3::setSlowMotion ratio=%f",1/(float)ratio);
 	return trickSeek(1/(float)ratio);
+#else
+/* konfetti: in libeplayer3 we changed this because
+ * I dont like application specific stuff in a library
+ */
+    int speed = getSpeed(ratio);
+
+	if(player && player->playback && (speed != -1)) {
+		int result = 0;
+		if(ratio > 1) result = player->playback->Command(player, PLAYBACK_SLOWMOTION, (void*)&speed);
+		if (result != 0)
+			return -1;
+	}
+	return 0;
+#endif
 }
 
 RESULT eServiceMP3::setFastForward(int ratio)
 {
+#if not defined(__sh__)
 	eDebug("eServiceMP3::setFastForward ratio=%i",ratio);
 	return trickSeek(ratio);
+#else
+
+/* konfetti: in libeplayer3 we changed this because
+ * I dont like application specific stuff in a library
+ */
+    int speed = getSpeed(ratio);
+    
+	if(player && player->playback && (speed != -1)) {
+        	int result = 0;
+        	if(ratio > 1) result = player->playback->Command(player, PLAYBACK_FASTFORWARD, (void*)&speed);
+		else if(ratio < -1) {
+			//speed = speed * -1;
+			result = player->playback->Command(player, PLAYBACK_FASTBACKWARD, (void*)&speed);
+		}
+    		else result = player->playback->Command(player, PLAYBACK_CONTINUE, NULL);
+        	if (result != 0)
+            		return -1;
+    	}
+	return 0;
+#endif
 }
 
 void eServiceMP3::seekTimeoutCB()
@@ -504,21 +837,30 @@
 		// iPausableService
 RESULT eServiceMP3::pause()
 {
+#if not defined(__sh__)
 	if (!m_gst_playbin || m_state != stRunning)
 		return -1;
 
 	gst_element_set_state(m_gst_playbin, GST_STATE_PAUSED);
 
+#else
+	if(player && player->playback)
+        player->playback->Command(player, PLAYBACK_PAUSE, NULL);
+#endif
 	return 0;
 }
 
 RESULT eServiceMP3::unpause()
 {
+#if not defined(__sh__)
 	if (!m_gst_playbin || m_state != stRunning)
 		return -1;
 
 	gst_element_set_state(m_gst_playbin, GST_STATE_PLAYING);
-
+#else
+    if(player && player->playback)
+        player->playback->Command(player, PLAYBACK_CONTINUE, NULL);
+#endif
 	return 0;
 }
 
@@ -531,6 +873,7 @@
 
 RESULT eServiceMP3::getLength(pts_t &pts)
 {
+#if not defined(__sh__)
 	if (!m_gst_playbin)
 		return -1;
 
@@ -545,11 +888,23 @@
 		/* len is in nanoseconds. we have 90 000 pts per second. */
 	
 	pts = len / 11111;
+#else
+    double length = 0;
+
+	if(player && player->playback)
+        player->playback->Command(player, PLAYBACK_LENGTH, &length);
+
+    if(length <= 0)
+        return -1;
+
+	pts = length * 90000;
+#endif
 	return 0;
 }
 
 RESULT eServiceMP3::seekToImpl(pts_t to)
 {
+#if not defined(__sh__)
 		/* convert pts to nanoseconds */
 	gint64 time_nanoseconds = to * 11111LL;
 	if (!gst_element_seek (m_gst_playbin, 1.0, GST_FORMAT_TIME, GST_SEEK_FLAG_FLUSH,
@@ -559,7 +914,8 @@
 		eDebug("eServiceMP3::seekTo failed");
 		return -1;
 	}
-
+#else
+#endif
 	return 0;
 }
 
@@ -567,6 +923,7 @@
 {
 	RESULT ret = -1;
 
+#if not defined(__sh__)
 	if (m_gst_playbin) {
 		eSingleLocker l(m_subs_to_pull_lock); // this is needed to dont handle incomming subtitles during seek!
 		if (!(ret = seekToImpl(to)))
@@ -578,10 +935,12 @@
 		}
 	}
 
+#else
+#endif
 	return ret;
 }
 
-
+#if not defined(__sh__)
 RESULT eServiceMP3::trickSeek(gdouble ratio)
 {
 	if (!m_gst_playbin)
@@ -622,10 +981,12 @@
 
 	return 0;
 }
+#endif
 
 
 RESULT eServiceMP3::seekRelative(int direction, pts_t to)
 {
+#if not defined(__sh__)
 	if (!m_gst_playbin)
 		return -1;
 
@@ -635,12 +996,17 @@
 	if (ppos < 0)
 		ppos = 0;
 	seekTo(ppos);
-	
+#else
+    float pos = direction*(to/90000.0);
+    if(player && player->playback)
+        player->playback->Command(player, PLAYBACK_SEEK, (void*)&pos);
+#endif
 	return 0;
 }
 
 RESULT eServiceMP3::getPlayPosition(pts_t &pts)
 {
+#if not defined(__sh__)
 	GstFormat fmt = GST_FORMAT_TIME;
 	gint64 pos;
 	GstElement *sink;
@@ -675,6 +1041,24 @@
 
 	/* pos is in nanoseconds. we have 90 000 pts per second. */
 	pts = pos / 11111;
+#else
+	if (player && player->playback && !player->playback->isPlaying) {
+		eDebug("eServiceMP3::%s !!!!EOF!!!! < -1", __func__);
+        if(m_state == stRunning)
+		    m_event((iPlayableService*)this, evEOF);
+        pts = 0;
+		return -1;
+	}
+    unsigned long long int vpts = 0;
+    if(player && player->playback)
+        player->playback->Command(player, PLAYBACK_PTS, &vpts);
+
+    if(vpts<=0)return -1;
+
+	/* len is in nanoseconds. we have 90 000 pts per second. */
+	pts = vpts>0?vpts:pts;;
+
+#endif
 // 	eDebug("gst_element_query_position %lld pts (%lld ms)", pts, pos/1000000);
 	return 0;
 }
@@ -687,6 +1071,9 @@
 
 RESULT eServiceMP3::isCurrentlySeekable()
 {
+#ifdef __sh__
+	return 3; /*Hellmaster1024: 1 for skipping 3 for skipping anf fast forward */
+#else
 	int ret = 3; // seeking and fast/slow winding possible
 	GstElement *sink;
 
@@ -712,6 +1099,7 @@
 	}
 
 	return ret;
+#endif
 }
 
 RESULT eServiceMP3::info(ePtr<iServiceInformation>&i)
@@ -737,7 +1125,9 @@
 
 int eServiceMP3::getInfo(int w)
 {
+#if not defined(__sh__)
 	const gchar *tag = 0;
+#endif
 
 	switch (w)
 	{
@@ -777,7 +1167,9 @@
 	case sTagKeywords:
 	case sTagChannelMode:
 	case sUser+12:
+#if not defined(__sh__)
 		return resIsString;
+#endif
 	case sTagTrackGain:
 	case sTagTrackPeak:
 	case sTagAlbumGain:
@@ -788,6 +1180,7 @@
 	case sTagPreviewImage:
 	case sTagAttachment:
 		return resIsPyObject;
+#if not defined(__sh__)
 	case sTagTrackNumber:
 		tag = GST_TAG_TRACK_NUMBER;
 		break;
@@ -821,22 +1214,25 @@
 	case sTagCRC:
 		tag = "has-crc";
 		break;
+#endif
 	default:
 		return resNA;
 	}
-
+#if not defined(__sh__)
 	if (!m_stream_tags || !tag)
 		return 0;
 	
 	guint value;
 	if (gst_tag_list_get_uint(m_stream_tags, tag, &value))
 		return (int) value;
+#endif
 
 	return 0;
 }
 
 std::string eServiceMP3::getInfoString(int w)
 {
+#if not defined(__sh__)
 	if ( !m_stream_tags && w < sUser && w > 26 )
 		return "";
 	const gchar *tag = 0;
@@ -949,9 +1345,68 @@
 		g_free(value);
 		return res;
 	}
+#else
+	char * tag = NULL;
+	char * res_str = NULL;
+	switch (w)
+	{
+	case sTagTitle:
+		tag = strdup("Title");
+		break;
+	case sTagArtist:
+		tag = strdup("Artist");
+		break;
+	case sTagAlbum:
+		tag = strdup("Album");
+		break;
+	case sTagComment:
+		tag = strdup("Comment");
+		break;
+	case sTagTrackNumber:
+		tag = strdup("Track");
+		break;
+	case sTagGenre:
+		tag = strdup("Genre");
+		break;
+	case sTagDate:
+		tag = strdup("Year");
+		break;
+
+	case sTagVideoCodec:
+		tag = strdup("VideoType");
+		break;
+	case sTagAudioCodec:
+		tag = strdup("AudioType");
+		break;
+
+	default:
+		return "";
+	}
+
+	if (player && player->playback) {
+		/*Hellmaster1024: we need to save the adress of tag to free the strduped mem 
+		  the command will retun a new adress for a new strduped string.
+                  Both Strings need to be freed! */
+		res_str = tag;
+        	player->playback->Command(player, PLAYBACK_INFO, &res_str);
+
+		/* Hellmaster1024: in case something went wrong maybe no new adress is returned */
+		if(tag != res_str){		
+			std::string res = res_str;
+        		free(tag);
+			free(res_str);
+			return res;
+		} else {
+			free(tag);
+			return "";	
+		}
+	}
+	free(tag);
+#endif
 	return "";
 }
 
+#if not defined(__sh__)
 PyObject *eServiceMP3::getInfoObject(int w)
 {
 	const gchar *tag = 0;
@@ -1011,6 +1466,7 @@
 
 	return 0;
 }
+#endif
 
 RESULT eServiceMP3::audioChannel(ePtr<iAudioChannelSelection> &ptr)
 {
@@ -1043,30 +1499,37 @@
 
 int eServiceMP3::getCurrentTrack()
 {
+#if not defined(__sh__)
 	if (m_currentAudioStream == -1)
 		g_object_get (G_OBJECT (m_gst_playbin), "current-audio", &m_currentAudioStream, NULL);
+#endif
 	return m_currentAudioStream;
 }
 
 RESULT eServiceMP3::selectTrack(unsigned int i)
 {
+#if not defined(__sh__)
 	pts_t ppos;
 	getPlayPosition(ppos);
 	ppos -= 90000;
 	if (ppos < 0)
 		ppos = 0;
 
+#endif
 	int ret = selectAudioStream(i);
+#if not defined(__sh__)
 	if (!ret) {
 		/* flush */
 		seekTo(ppos);
 	}
+#endif
 
 	return ret;
 }
 
 int eServiceMP3::selectAudioStream(int i)
 {
+#if not defined(__sh__)
 	int current_audio;
 	g_object_set (G_OBJECT (m_gst_playbin), "current-audio", i, NULL);
 	g_object_get (G_OBJECT (m_gst_playbin), "current-audio", &current_audio, NULL);
@@ -1077,6 +1540,13 @@
 		return 0;
 	}
 	return -1;
+#else
+	if(i!=m_currentAudioStream){
+		if(player && player->playback)
+            player->playback->Command(player, PLAYBACK_SWITCH_AUDIO, (void*)&i);
+		m_currentAudioStream=i;
+	}
+#endif
 }
 
 int eServiceMP3::getCurrentChannel()
@@ -1094,6 +1564,7 @@
 {
  	if (i >= m_audioStreams.size())
 		return -2;
+#if not defined(__sh__)
 		info.m_description = m_audioStreams[i].codec;
 /*	if (m_audioStreams[i].type == atMPEG)
 		info.m_description = "MPEG";
@@ -1113,11 +1584,27 @@
 		info.m_description = "FLAC";
 	else
 		info.m_description = "???";*/
+#else
+	if (m_audioStreams[i].type == atMPEG)
+		info.m_description = "MPEG";
+	else if (m_audioStreams[i].type == atMP3)
+		info.m_description = "MP3";
+	else if (m_audioStreams[i].type == atAC3)
+		info.m_description = "AC3";
+	else if (m_audioStreams[i].type == atAAC)
+		info.m_description = "AAC";
+	else if (m_audioStreams[i].type == atDTS)
+		info.m_description = "DTS";
+	else if (m_audioStreams[i].type == atPCM)
+		info.m_description = "PCM";
+	else if (m_audioStreams[i].type == atOGG)
+		info.m_description = "OGG";
+#endif
 	if (info.m_language.empty())
 		info.m_language = m_audioStreams[i].language_code;
 	return 0;
 }
-
+#if not defined(__sh__)
 subtype_t getSubtitleType(GstPad* pad, gchar *g_codec=NULL)
 {
 	subtype_t type = stUnknown;
@@ -1555,9 +2042,9 @@
 	else
 		eDebug("gstPoll unhandled Message %d\n", msg.type);
 }
-
+#endif
 eAutoInitPtr<eServiceFactoryMP3> init_eServiceFactoryMP3(eAutoInitNumbers::service+1, "eServiceFactoryMP3");
-
+#if not defined(__sh__)
 void eServiceMP3::gstCBsubtitleAvail(GstElement *appsink, gpointer user_data)
 {
 	eServiceMP3 *_this = (eServiceMP3*)user_data;	
@@ -1681,9 +2168,30 @@
 	else
 		eDebug("no subtitle sink!");
 }
+#else
+void eServiceMP3::eplayerCBsubtitleAvail(long int duration_ms, size_t len, char * buffer, void* user_data)
+{
+	eDebug("eServiceMP3::%s >", __func__);
+	unsigned char tmp[len+1];
+	memcpy(tmp, buffer, len);
+	tmp[len] = 0;
+	eDebug("gstCBsubtitleAvail: %s", tmp);
+	eServiceMP3 *_this = (eServiceMP3*)user_data;
+	if ( _this->m_subtitle_widget )
+	{
+		ePangoSubtitlePage page;
+		gRGB rgbcol(0xD0,0xD0,0xD0);
+		page.m_elements.push_back(ePangoSubtitlePageElement(rgbcol, (const char*)tmp));
+		page.m_timeout = duration_ms;
+		(_this->m_subtitle_widget)->setPage(page);
+	}
+	eDebug("eServiceMP3::%s <", __func__);
+}
+#endif
 
 void eServiceMP3::pushSubtitles()
 {
+#if not defined(__sh__)
 	while ( !m_subtitle_pages.empty() )
 	{
 		SubtitlePage &frontpage = m_subtitle_pages.front();
@@ -1739,6 +2247,7 @@
 	}
 	if (m_subtitle_pages.empty())
 		pullSubtitle();
+#endif
 }
 
 
@@ -1771,9 +2280,11 @@
 
 	if (m_currentSubtitleStream != pid)
 	{
+#if not defined(__sh__)
 		g_object_set (G_OBJECT (m_gst_playbin), "current-text", pid, NULL);
 		eDebug ("eServiceMP3::enableSubtitles g_object_set current-text = %i", pid);
 		m_currentSubtitleStream = pid;
+#endif
 		m_subs_to_pull = 0;
 		m_prev_decoder_time = -1;
 		m_subtitle_pages.clear();
@@ -1782,10 +2293,14 @@
 	m_subtitle_widget = 0;
 	m_subtitle_widget = new eSubtitleWidget(parent);
 	m_subtitle_widget->resize(parent->size()); /* full size */
-
+#if not defined(__sh__)
 	g_object_get (G_OBJECT (m_gst_playbin), "current-text", &text_pid, NULL);
 
 	eDebug ("eServiceMP3::switched to subtitle stream %i", text_pid);
+#else
+	if(player && player->playback)
+       player->playback->Command(player, PLAYBACK_SWITCH_SUBTITLE, (void*)&pid);
+#endif
 // 	gst_pad_remove_buffer_probe (pad, subprobe_handler_id);
 
 	m_event((iPlayableService*)this, evUpdatedInfo);
@@ -1804,6 +2319,11 @@
 	m_subtitle_pages.clear();
 	delete m_subtitle_widget;
 	m_subtitle_widget = 0;
+#if defined(__sh__)
+    int pid = -1;
+    if(player && player->playback)
+       player->playback->Command(player, PLAYBACK_SWITCH_SUBTITLE, (void*)&pid);
+#endif
 	return 0;
 }
 
@@ -1867,7 +2387,9 @@
 int eServiceMP3::setBufferSize(int size)
 {
 	m_buffer_size = size;
+#if not defined(__sh__)
 	g_object_set (G_OBJECT (m_gst_playbin), "buffer-size", m_buffer_size, NULL);
+#endif
 	return 0;
 }
 
@@ -1883,6 +2405,7 @@
 
 void eServiceMP3::setAC3Delay(int delay)
 {
+#if not defined(__sh__)
 	ac3_delay = delay;
 	if (!m_gst_playbin || m_state != stRunning)
 		return;
@@ -1916,10 +2439,12 @@
 			gst_object_unref(sink);
 		}
 	}
+#endif
 }
 
 void eServiceMP3::setPCMDelay(int delay)
 {
+#if not defined(__sh__)
 	pcm_delay = delay;
 	if (!m_gst_playbin || m_state != stRunning)
 		return;
@@ -1960,5 +2485,6 @@
 			gst_object_unref(sink);
 		}
 	}
+#endif
 }
 
diff -Nur '--exclude=.git' '--exclude=tuxtxt' enigma2-nightly.org/lib/service/servicemp3.h enigma2-nightly.patched/lib/service/servicemp3.h
--- enigma2-nightly.org/lib/service/servicemp3.h	2011-09-03 18:23:28.000023488 +0200
+++ enigma2-nightly.patched/lib/service/servicemp3.h	2011-09-03 18:23:47.540032997 +0200
@@ -6,7 +6,17 @@
 #include <lib/dvb/pmt.h>
 #include <lib/dvb/subtitle.h>
 #include <lib/dvb/teletext.h>
+#if not defined(__sh__)
 #include <gst/gst.h>
+#else
+#include <common.h>
+#include <subtitle.h>
+#define gint int
+extern OutputHandler_t		OutputHandler;
+extern PlaybackHandler_t	PlaybackHandler;
+extern ContainerHandler_t	ContainerHandler;
+extern ManagerHandler_t		ManagerHandler;
+#endif
 /* for subtitles */
 #include <lib/gui/esubtitle.h>
 
@@ -43,7 +53,9 @@
 	int getInfo(const eServiceReference &ref, int w);
 };
 
+#if not defined(__sh__)
 typedef struct _GstElement GstElement;
+#endif
 
 typedef enum { atUnknown, atMPEG, atMP3, atAC3, atDTS, atAAC, atPCM, atOGG, atFLAC } audiotype_t;
 typedef enum { stUnknown, stPlainText, stSSA, stASS, stSRT, stVOB, stPGS } subtype_t;
@@ -101,7 +113,9 @@
 	RESULT getName(std::string &name);
 	int getInfo(int w);
 	std::string getInfoString(int w);
+#if not defined(__sh__)
 	PyObject *getInfoObject(int w);
+#endif
 
 		// iAudioTrackSelection	
 	int getNumberOfTracks();
@@ -130,6 +144,7 @@
 	void setAC3Delay(int);
 	void setPCMDelay(int);
 
+#if not defined(__sh__)
 	struct audioStream
 	{
 		GstPad* pad;
@@ -162,6 +177,39 @@
 		{
 		}
 	};
+#else
+	struct audioStream
+	{
+		audiotype_t type;
+		std::string language_code; /* iso-639, if available. */
+		std::string codec; /* clear text codec description */
+		audioStream()
+			:type(atUnknown)
+		{
+		}
+	};
+	struct subtitleStream
+	{
+		subtype_t type;
+		std::string language_code; /* iso-639, if available. */
+		int id;
+		subtitleStream()
+		{
+		}
+	};
+	struct sourceStream
+	{
+		audiotype_t audiotype;
+		containertype_t containertype;
+		bool is_video;
+		bool is_streaming;
+		sourceStream()
+			:audiotype(atUnknown), containertype(ctNone), is_video(false), is_streaming(false)
+		{
+		}
+	};
+#endif
+
 	struct bufferInfo
 	{
 		int bufferPercent;
@@ -203,9 +251,12 @@
 		stIdle, stRunning, stStopped,
         };
         int m_state;
+#if not defined(__sh__)
         GstElement *m_gst_playbin;
         GstTagList *m_stream_tags;
-
+#else
+	Context_t * player;
+#endif
         struct Message
         {
                 Message()
@@ -214,20 +265,25 @@
                 Message(int type)
                         :type(type)
                 {}
+#if not defined(__sh__)
                 Message(int type, GstPad *pad)
                         :type(type)
                 {
                         d.pad=pad;
                 }
 
+#endif
                 int type;
+#if not defined(__sh__)
                 union {
                         GstPad *pad; // for msg type 3
                 } d;
+#endif
         };
 
         eFixedMessagePump<Message> m_pump;
 
+#if not defined(__sh__)
         audiotype_t gstCheckAudioPad(GstStructure* structure);
         void gstBusCall(GstBus *bus, GstMessage *msg);
         static GstBusSyncReply gstBusSyncHandler(GstBus *bus, GstMessage *message, gpointer user_data);
@@ -237,7 +293,9 @@
         GstPad* gstCreateSubtitleSink(eServiceMP3* _this, subtype_t type);
 	void gstPoll(const Message&);
         static void gstHTTPSourceSetAgent(GObject *source, GParamSpec *unused, gpointer user_data);
-
+#else
+	static void eplayerCBsubtitleAvail(long int duration_ns, size_t len, char * buffer, void* user_data);
+#endif
 	struct SubtitlePage
 	{
 		enum { Unknown, Pango, Vob } type;
@@ -258,13 +316,17 @@
         int m_subs_to_pull;
         sourceStream m_sourceinfo;
 	eSingleLock m_subs_to_pull_lock;
+#if not defined(__sh__)
 	gulong m_subs_to_pull_handler_id;
-
+#endif
 	RESULT seekToImpl(pts_t to);
 
 	gint m_aspect, m_width, m_height, m_framerate, m_progressive;
 	std::string m_useragent;
+#if not defined(__sh__)
 	RESULT trickSeek(gdouble ratio);
+#endif
 };
+  
 
 #endif
diff -Nur '--exclude=.git' '--exclude=tuxtxt' enigma2-nightly.org/lib/service/Makefile.am enigma2-nightly.patched/lib/service/Makefile.am
--- enigma2-nightly.org/lib/service/Makefile.am	2011-09-03 18:23:27.920023547 +0200
+++ enigma2-nightly.patched/lib/service/Makefile.am	2011-09-03 18:23:47.500035403 +0200
@@ -1,6 +1,7 @@
 AM_CPPFLAGS = \
 	-I$(top_srcdir) \
 	-I$(top_srcdir)/include \
+	-I$(top_srcdir)/../misc/tools/libeplayer3/include \	
 	-include Python.h \
 	-include $(top_builddir)/enigma2_config.h
 
