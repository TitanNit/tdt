--- a/include/dvbsi++/byte_stream.h
+++ b/include/dvbsi++/byte_stream.h
@@ -23,8 +23,14 @@
 #define w32(p,v)	do { *(uint32_t * const)(p) = ((const uint32_t)v) } while (0)
 #define w64(p,v)	do { *(uint64_t * const)(p) = ((const uint64_t)v) } while (0)
 #else
+#ifdef __sh__
+/* SuperH does not like unaligned accesses, so work around that */
+#define r16(p)		((((uint8_t *)p)[0]) <<  8 | (((uint8_t *)p)[1]))
+#define r32(p)		((((uint8_t *)p)[0]) << 24 | (((uint8_t *)p)[1]) << 16 | (((uint8_t *)p)[2]) << 8 | ((uint8_t *)p)[3])
+#else
 #define r16(p)		bswap_16(*(const uint16_t * const)p)
 #define r32(p)		bswap_32(*(const uint32_t * const)p)
+#endif
 #define r64(p)		bswap_64(*(const uint64_t * const)p)
 #define w16(p,v)	do { *(uint16_t * const)(p) = bswap_16((const uint16_t)v) } while (0)
 #define w32(p,v)	do { *(uint32_t * const)(p) = bswap_32((const uint32_t)v) } while (0)
--- a/src/time_date_section.cpp
+++ b/src/time_date_section.cpp
@@ -15,7 +15,7 @@
 
 TimeAndDateSection::TimeAndDateSection(const uint8_t * const buffer) : ShortSection(buffer)
 {
-	if (sectionLength > 8) {
+	if (sectionLength >= 5) {
 		utcTimeMjd = UINT16(&buffer[3]);
 		utcTimeBcd = (buffer[5] << 16) | UINT16(&buffer[6]);
 	}
--- a/src/content_identifier_descriptor.cpp	2013-09-23 21:10:43.000000000 +0200
+++ b/src/content_identifier_descriptor.cpp	2013-11-05 15:19:28.774719808 +0100
@@ -69,6 +69,8 @@
 			i += crid->getLength() + 2;
 		else if (crid->getLocation() == 1)
 			i += 3;
+		else
+			return; // probably wrong, but better than an endless loop ... --martii
 
 		identifier.push_back(crid);
 	}
