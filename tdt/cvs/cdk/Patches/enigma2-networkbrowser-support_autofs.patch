--- enigma2-networkbrowser/src/MountView.py.org	2013-07-28 20:28:50.837430438 +0200
+++ enigma2-networkbrowser/src/MountView.py	2013-07-28 20:30:35.265442621 +0200
@@ -110,7 +110,7 @@
                 cur = self["config"].getCurrent()
                 if cur:
                         returnValue = cur[1]
-                        self.applyConfigRef = self.session.openWithCallback(self.applyConfigfinishedCB, MessageBox, _("Please wait while removing your network mount..."), type = MessageBox.TYPE_INFO, enable_input = False)
+                        self.applyConfigRef = self.session.openWithCallback(self.applyConfigfinishedCB, MessageBox, _("Please wait while removing your network mount..."), type = MessageBox.TYPE_INFO, timeout = 10)
                         iAutoMount.removeMount(returnValue,self.removeDataAvail)
 
         def removeDataAvail(self, data):

--- enigma2-networkbrowser/src/NetworkBrowser.py.org	2012-03-31 14:38:41.108148992 -0700
+++ enigma2-networkbrowser/src/NetworkBrowser.py	2012-04-01 11:34:30.679747955 -0700
@@ -134,7 +134,6 @@
 
 	def cleanup(self):
 		del self.Timer
-		iAutoMount.stopMountConsole()
 		iNetwork.stopRestartConsole()
 		iNetwork.stopGetInterfacesConsole()
 
--- enigma2-networkbrowser/src/plugin.py.org	2012-03-31 14:38:41.108148992 -0700
+++ enigma2-networkbrowser/src/plugin.py	2012-04-01 11:34:30.679747955 -0700
@@ -25,23 +25,11 @@
 def MountManagerCallFunction(iface):
 	return MountManagerMain
 
-def RemountMain(session, iface = None, **kwargs):
-	from AutoMount import iAutoMount
-	iAutoMount.getAutoMountPoints() 
-
-def RemountCallFunction(iface):
-	if iNetwork.getAdapterAttribute(iface, "up"):
-		return RemountMain
-
 def Plugins(path, **kwargs):
 	global plugin_path
 	plugin_path = path
 	return [
 		PluginDescriptor(name=_("NetworkBrowser"), description=_("Search for network shares"), where = PluginDescriptor.WHERE_NETWORKSETUP, fnc={"ifaceSupported": NetworkBrowserCallFunction, "menuEntryName": lambda x: _("NetworkBrowser"), "menuEntryDescription": lambda x: _("Search for network shares...")}),
 		PluginDescriptor(name=_("MountManager"), description=_("Manage network shares"), where = PluginDescriptor.WHERE_NETWORKSETUP, fnc={"ifaceSupported": MountManagerCallFunction, "menuEntryName": lambda x: _("MountManager"), "menuEntryDescription": lambda x: _("Manage your network shares...")}),
-		PluginDescriptor(name=_("Mount again"), description=_("Attempt to mount shares again"), where = PluginDescriptor.WHERE_NETWORKSETUP,
-			fnc={"ifaceSupported": RemountCallFunction,
-				"menuEntryName": lambda x: _("Mount again"),
-				"menuEntryDescription": lambda x: _("Attempt to recover lost mounts (in background)")})
 	]
 
--- enigma2-networkbrowser/src/AutoMount.py.org	2012-03-31 14:38:41.100148992 -0700
+++ enigma2-networkbrowser/src/AutoMount.py	2012-04-01 11:34:27.919747954 -0700
@@ -2,12 +2,12 @@
 # for localized messages
 from __init__ import _
 import os
+import re
 from enigma import eTimer
 from Components.Console import Console
 from Components.Harddisk import harddiskmanager #global harddiskmanager
-from xml.etree.cElementTree import parse as cet_parse
 
-XML_FSTAB = "/etc/enigma2/automounts.xml"
+XML_FSTAB = "/etc/auto.network"
 
 def rm_rf(d): # only for removing the ipkg stuff from /media/hdd subdirs
 	try:
@@ -24,14 +24,9 @@
 	"""Manages Mounts declared in a XML-Document."""
 	def __init__(self):
 		self.automounts = {}
-		self.restartConsole = Console()
-		self.MountConsole = Console()
-		self.removeConsole = Console()
 		self.activeMountsCounter = 0
 		# Initialize Timer
 		self.callback = None
-		self.timer = eTimer()
-		self.timer.callback.append(self.mountTimeout)
 
 		self.getAutoMountPoints()
 
@@ -43,7 +38,7 @@
 
 		if not os.path.exists(XML_FSTAB):
 			return
-		tree = cet_parse(XML_FSTAB).getroot()
+		tree = open(XML_FSTAB, "r").read()
 
 		def getValue(definitions, default):
 			# Initialize Output
@@ -52,41 +47,55 @@
 			Len = len(definitions)
 			return Len > 0 and definitions[Len-1].text or default
 		# Config is stored in "mountmanager" element
-		# Read out NFS Mounts
-		for nfs in tree.findall("nfs"):
-			for mount in nfs.findall("mount"):
+		for line in tree.split("\n"):
+			line = re.sub(' +','\t',line)
+			print "LINE", line
+			# Read out NFS Mounts
+			if "-fstype=nfs" in line or "-fstype=cifs" in line:
 				data = { 'isMounted': False, 'active': False, 'ip': False, 'sharename': False, 'sharedir': False, 'username': False, \
 							'password': False, 'mounttype' : False, 'options' : False, 'hdd_replacement' : False }
 				try:
-					data['mounttype'] = 'nfs'.encode("UTF-8")
-					data['active'] = getValue(mount.findall("active"), False).encode("UTF-8")
-					if data["active"] == 'True' or data["active"] == True:
-						self.activeMountsCounter +=1
-					data['hdd_replacement'] = getValue(mount.findall("hdd_replacement"), "False").encode("UTF-8")
-					data['ip'] = getValue(mount.findall("ip"), "192.168.0.0").encode("UTF-8")
-					data['sharedir'] = getValue(mount.findall("sharedir"), "/exports/").encode("UTF-8")
-					data['sharename'] = getValue(mount.findall("sharename"), "MEDIA").encode("UTF-8")
-					data['options'] = getValue(mount.findall("options"), "rw,nolock,tcp").encode("UTF-8")
-					self.automounts[data['sharename']] = data
-				except Exception, e:
-					print "[MountManager] Error reading Mounts:", e
-			# Read out CIFS Mounts
-		for nfs in tree.findall("cifs"):
-			for mount in nfs.findall("mount"):
-				data = { 'isMounted': False, 'active': False, 'ip': False, 'sharename': False, 'sharedir': False, 'username': False, \
-							'password': False, 'mounttype' : False, 'options' : False, 'hdd_replacement' : False }
-				try:
-					data['mounttype'] = 'cifs'.encode("UTF-8")
-					data['active'] = getValue(mount.findall("active"), False).encode("UTF-8")
-					if data["active"] == 'True' or data["active"] == True:
+					if "-fstype=nfs" in line:
+						data['mounttype'] = 'nfs'.encode("UTF-8")
+					elif "-fstype=cifs" in line:
+						data['mounttype'] = 'cifs'.encode("UTF-8")
+					if line[0] == "#":
+						line = line[1:]
+						data['active'] = 'False'.encode("UTF-8")
+					else:
+						data['active'] = 'True'.encode("UTF-8")
+
+					if data["active"] == 'True':
 						self.activeMountsCounter +=1
-					data['hdd_replacement'] = getValue(mount.findall("hdd_replacement"), "False").encode("UTF-8")
-					data['ip'] = getValue(mount.findall("ip"), "192.168.0.0").encode("UTF-8")
-					data['sharedir'] = getValue(mount.findall("sharedir"), "/exports/").encode("UTF-8")
-					data['sharename'] = getValue(mount.findall("sharename"), "MEDIA").encode("UTF-8")
-					data['options'] = getValue(mount.findall("options"), "rw,nolock").encode("UTF-8")
-					data['username'] = getValue(mount.findall("username"), "guest").encode("UTF-8")
-					data['password'] = getValue(mount.findall("password"), "").encode("UTF-8")
+					fields = line.split("\t")
+					data['sharename'] = fields[0].encode("UTF-8")
+
+					data['username'] = 'guest'.encode("UTF-8")
+					data['password'] = ''.encode("UTF-8")
+					data['options'] = ""
+					for option in fields[1].split(","):
+						if option.startswith("-fstype"):
+							continue
+						elif option.startswith("user"):
+							data['username'] = option[5:].encode("UTF-8")
+						elif option.startswith("pass"):
+							data['password'] = option[5:].encode("UTF-8")
+						else:
+							data['options'] += option + ","
+					if len(data['options']) > 1:
+						data['options'] = data['options'][:-1]
+					data['options'] = data['options'].encode("UTF-8")
+
+					if fields[2][:3] == "://": #cifs
+						ip = fields[2][3:].split("/", 1)
+					else:
+						ip = fields[2].split(":/", 1)
+					data['ip'] = ip[0].encode("UTF-8")
+					data['sharedir'] = ip[1].encode("UTF-8")
+					if len(fields) > 3 and fields[3][1:] == "HDD_REPLACEMENT":
+						data['hdd_replacement'] = 'True'.encode("UTF-8")
+					else:
+						data['hdd_replacement'] = 'False'.encode("UTF-8")
 					self.automounts[data['sharename']] = data
 				except Exception, e:
 					print "[MountManager] Error reading Mounts:", e
@@ -94,11 +103,12 @@
 		self.checkList = self.automounts.keys()
 		if not self.checkList:
 			print "[AutoMount.py] self.automounts without mounts",self.automounts
-			if callback is not None:
-				callback(True)
 		else:
 			self.CheckMountPoint(self.checkList.pop(), callback)
 
+		if callback is not None:
+			callback(True)
+
 	def sanitizeOptions(self, origOptions, cifs=False):
 		options = origOptions.strip()
 		if not options:
@@ -116,78 +126,21 @@
 
 	def CheckMountPoint(self, item, callback):
 		data = self.automounts[item]
-		if not self.MountConsole:
-			self.MountConsole = Console()
-		command = None
-		path = os.path.join('/media/net', data['sharename'])
-		if self.activeMountsCounter == 0:
-			print "self.automounts without active mounts",self.automounts
-			if data['active'] == 'False' or data['active'] is False:
-				umountcmd = "umount -fl '%s'" % path
-				print "[AutoMount.py] UMOUNT-CMD--->",umountcmd
-				self.MountConsole.ePopen(umountcmd, self.CheckMountPointFinished, [data, callback])
-		else:
-			if data['active'] == 'False' or data['active'] is False:
-				command = "umount -fl '%s'" % path
-
-			elif data['active'] == 'True' or data['active'] is True:
-			        try:
-					if not os.path.exists(path):
-						os.makedirs(path)
-					if data['mounttype'] == 'nfs':
-						if not os.path.ismount(path):
-							if data['options']:
-								options = "tcp,noatime," + data['options']
-							else:
-								options = "tcp,noatime"
-							tmpcmd = "mount -t nfs -o %s '%s' '%s'" % (options, data['ip'] + ':/' + data['sharedir'], path)
-							command = tmpcmd.encode("UTF-8")
-
-					elif data['mounttype'] == 'cifs':
-						if not os.path.ismount(path):
-							tmpusername = data['username'].replace(" ", "\\ ")
-							options = data['options'] + ',noatime,noserverino,iocharset=utf8,username='+ tmpusername + ',password='+ data['password']
-							tmpcmd = "mount -t cifs -o %s '//%s/%s' '%s'" % (options, data['ip'], data['sharedir'], path)
-							command = tmpcmd.encode("UTF-8")
-				except Exception, ex:
-				        print "[AutoMount.py] Failed to create", path, "Error:", ex
-					command = None
-			if command:
-				print "[AutoMount.py] U/MOUNTCMD--->",command
-				self.MountConsole.ePopen(command, self.CheckMountPointFinished, [data, callback])
-			else:
-				self.CheckMountPointFinished(None,None, [data, callback])
+		self.CheckMountPointFinished(None,None, [data, callback])
 
 	def CheckMountPointFinished(self, result, retval, extra_args):
 		print "[AutoMount.py] CheckMountPointFinished",result,retval
 		(data, callback ) = extra_args
 		path = os.path.join('/media/net', data['sharename'])
-		if os.path.exists(path):
-			if os.path.ismount(path):
-				if self.automounts.has_key(data['sharename']):
-					self.automounts[data['sharename']]['isMounted'] = True
-					desc = data['sharename']
-					if self.automounts[data['sharename']]['hdd_replacement'] == 'True': #hdd replacement hack
-						self.makeHDDlink(path)
-					harddiskmanager.addMountedPartition(path, desc)
-			else:
-				if self.automounts.has_key(data['sharename']):
-					self.automounts[data['sharename']]['isMounted'] = False
-				if os.path.exists(path):
-					if not os.path.ismount(path):
-					        try:
-							os.rmdir(path)
-							harddiskmanager.removeMountedPartition(path)
-						except Exception, ex:
-						        print "Failed to remove", path, "Error:", ex
+		if self.automounts.has_key(data['sharename']):
+			self.automounts[data['sharename']]['isMounted'] = True
+			desc = data['sharename']
+			if self.automounts[data['sharename']]['hdd_replacement'] == 'True': #hdd replacement hack
+				self.makeHDDlink(path)
+			harddiskmanager.addMountedPartition(path, desc)
 		if self.checkList:
 			# Go to next item in list...
 			self.CheckMountPoint(self.checkList.pop(), callback)
-		if self.MountConsole:
-			if len(self.MountConsole.appContainers) == 0:
-				if callback is not None:
-					self.callback = callback
-					self.timer.startLongTimer(1)
 
 	def makeHDDlink(self, path):
 		hdd_dir = '/media/hdd'
@@ -210,13 +163,6 @@
 			except Exception, ex:
 				print "[AutoMount.py] Failed to create ", movie, "Error:", ex
 
-	def mountTimeout(self):
-		self.timer.stop()
-		if self.MountConsole:
-			if len(self.MountConsole.appContainers) == 0:
-				print "self.automounts after mounting",self.automounts
-				if self.callback is not None:
-					self.callback(True)
 
 	def getMountsList(self):
 		return self.automounts
@@ -233,27 +179,31 @@
 
 	def writeMountsConfig(self):
 		# Generate List in RAM
-		list = ['<?xml version="1.0" ?>\n<mountmanager>\n']
+		list = ['# automatically generated by enigma 2\n']
 		for sharename, sharedata in self.automounts.items():
-			mtype = sharedata['mounttype']
-			list.append('<' + mtype + '>\n')
-			list.append(' <mount>\n')
-			list.append("  <active>" + str(sharedata['active']) + "</active>\n")
-			list.append("  <hdd_replacement>" + str(sharedata['hdd_replacement']) + "</hdd_replacement>\n")
-			list.append("  <ip>" + sharedata['ip'] + "</ip>\n")
-			list.append("  <sharename>" + sharedata['sharename'] + "</sharename>\n")
-			list.append("  <sharedir>" + sharedata['sharedir'] + "</sharedir>\n")
-			list.append("  <options>" + sharedata['options'] + "</options>\n")
+			print "SHARE", sharedata
+			if sharedata['active'] is False:
+				list.append('#')
+			list.append(sharedata['sharename'])
+			list.append('\t')
+			list.append('-fstype=' + sharedata['mounttype'])
+			list.append("," + sharedata['options'])
 
 			if sharedata['mounttype'] == 'cifs':
-				list.append("  <username>" + sharedata['username'] + "</username>\n")
-				list.append("  <password>" + sharedata['password'] + "</password>\n")
-
-			list.append(' </mount>\n')
-			list.append('</' + mtype + '>\n')
-
-		# Close Mountmanager Tag
-		list.append('</mountmanager>\n')
+				list.append(",user=" + sharedata['username'])
+				list.append(",pass=" + sharedata['password'])
+			list.append('\t')
+			if sharedata['mounttype'] == 'cifs':
+				list.append("://")
+			list.append(sharedata['ip'])
+			if sharedata['mounttype'] == 'nfs':
+				list.append(":/")
+			elif sharedata['mounttype'] == 'cifs':
+				list.append("/")
+			list.append(sharedata['sharedir'])
+			if sharedata['hdd_replacement'] is True:
+				list.append('\t#HDD_REPLACEMENT')
+			list.append('\n')
 
 		# Try Saving to Flash
 		try:
@@ -261,9 +211,6 @@
 		except Exception, e:
 			print "[AutoMount.py] Error Saving Mounts List:", e
 
-	def stopMountConsole(self):
-		if self.MountConsole is not None:
-			self.MountConsole = None
 
 	def removeMount(self, mountpoint, callback = None):
 		print "[AutoMount.py] removing mount: ",mountpoint
@@ -273,28 +220,6 @@
 				self.newautomounts[sharename] = sharedata
 		self.automounts.clear()
 		self.automounts = self.newautomounts
-		if not self.removeConsole:
-			self.removeConsole = Console()
-		path = '/media/net/'+ mountpoint
-		umountcmd = "umount -fl '%s'" % path
-		print "[AutoMount.py] UMOUNT-CMD--->",umountcmd
-		self.removeConsole.ePopen(umountcmd, self.removeMountPointFinished, [path, callback])
-
-	def removeMountPointFinished(self, result, retval, extra_args):
-		print "[AutoMount.py] removeMountPointFinished result", result, "retval", retval
-		(path, callback ) = extra_args
-		if os.path.exists(path):
-			if not os.path.ismount(path):
-			        try:
-					os.rmdir(path)
-					harddiskmanager.removeMountedPartition(path)
-				except Exception, ex:
-				        print "Failed to remove", path, "Error:", ex
-		if self.removeConsole:
-			if len(self.removeConsole.appContainers) == 0:
-				if callback is not None:
-					self.callback = callback
-					self.timer.startLongTimer(1)
 
 
 iAutoMount = AutoMount()
